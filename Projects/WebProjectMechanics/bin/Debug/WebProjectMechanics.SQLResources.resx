<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SELECTSiteParameterTypeASRecordSource0ASPr" xml:space="preserve">
    <value>SELECT 'SiteParameterType' AS RecordSource, 0 AS PrimarySort, Null AS CompanyID, Null AS SiteParameterTypeID, SiteParameterType.SiteParameterTypeOrder, SiteParameterType.SiteParameterTemplate, Null AS SiteCategoryID, Null AS SiteCategoryGroupID, Null AS SiteCategoryTypeID, SiteParameterType.SiteParameterTypeNM, SiteParameterType.SiteParameterTypeDS,0 as CompanySiteParameterID FROM(SiteParameterType) ORDER BY 2 desc,3 DESC, 7 DESC </value>
    <comment>SELECTSiteParameterTypeASRecordSource0ASPr description</comment>
  </data>
  <data name="SELECTCompanySiteParameterASRecordSourceIi" xml:space="preserve">
    <value>SELECT 'CompanySiteParameter' AS RecordSource, iif(CompanySiteParameter.CompanySiteParameterID is null,0,10)+iif(CompanySiteParameter.SiteCategoryGroupID is null,0,1)+iif(CompanySiteParameter.PageID is null,0,1)+iif(CompanySiteParameter.CompanyID is null,0,1) as PrimarySort, CompanySiteParameter.CompanyID, CompanySiteParameter.SiteParameterTypeID, CompanySiteParameter.SortOrder, CompanySiteParameter.ParameterValue, CompanySiteParameter.PageID, CompanySiteParameter.SiteCategoryGroupID, '' AS SiteCategoryTypeID, SiteParameterType.SiteParameterTypeNM, SiteParameterType.SiteParameterTypeDS,CompanySiteParameter.CompanySiteParameterID FROM SiteParameterType INNER JOIN CompanySiteParameter ON SiteParameterType.SiteParameterTypeID = CompanySiteParameter.SiteParameterTypeID WHERE(((CompanySiteParameter.CompanyID) = {0} Or (CompanySiteParameter.CompanyID) Is Null)) ORDER BY 2 desc,3 DESC, 7 DESC </value>
    <comment>SELECTCompanySiteParameterASRecordSourceIi description</comment>
  </data>
  <data name="GetCompanySiteTypeParameterList" xml:space="preserve">
    <value>SELECT 'CompanySiteTypeParameter' AS RecordSource, IIf(CompanySiteTypeParameter.CompanySiteTypeParameterID Is Null,0,10)+IIf(CompanySiteTypeParameter.SiteCategoryGroupID Is Null,0,1)+IIf(CompanySiteTypeParameter.SiteCategoryID Is Null,0,1)+IIf(CompanySiteTypeParameter.CompanyID Is Null,0,1) AS PrimarySort, CompanySiteTypeParameter.CompanyID, CompanySiteTypeParameter.SiteParameterTypeID, CompanySiteTypeParameter.SortOrder, CompanySiteTypeParameter.ParameterValue, iif(CompanySiteTypeParameter.SiteCategoryID is null,null,'CAT-' &amp; CompanySiteTypeParameter.SiteCategoryID) as PageID, CompanySiteTypeParameter.SiteCategoryGroupID, CompanySiteTypeParameter.SiteCategoryTypeID, SiteParameterType.SiteParameterTypeNM, SiteParameterType.SiteParameterTypeDS,CompanySiteTypeParameter.CompanySiteTypeParameterID FROM SiteParameterType INNER JOIN CompanySiteTypeParameter ON SiteParameterType.[SiteParameterTypeID] = CompanySiteTypeParameter.[SiteParameterTypeID] WHERE (((CompanySiteTypeParameter.CompanyID)={0}) AND ((CompanySiteTypeParameter.SiteCategoryTypeID)={1})) OR (((CompanySiteTypeParameter.CompanyID) Is Null) AND ((CompanySiteTypeParameter.SiteCategoryTypeID)={1})) ORDER BY 2 desc,3 DESC, 7 DESC </value>
    <comment>GetCompanySiteTypeParameterList description</comment>
  </data>
  <data name="GetLinkCategoryList" xml:space="preserve">
    <value>SELECT LinkCategory.ID,  LinkCategory.Title,  LinkCategory.ParentID,  LinkCategory.Description,  LinkCategory.PageID,  0 AS CountOfID FROM LinkCategory </value>
    <comment>GetLinkCategoryList description</comment>
  </data>
  <data name="GetSiteCategoryLinks" xml:space="preserve">
    <value>SELECT Link.ID,Link.LinkTypeCD, LinkCategory.Title as LinkCategoryTitle, Link.CategoryID, Link.PageID,Link.Title as LinkTitle, Link.Description, Link.URL, Link.DateAdd, Link.Ranks, Link.Views, Link.UserName, Link.UserID, Link.ASIN, Link.Ranks,  'Link' as LinkSource, '' as SiteCategoryTypeID, Link.SiteCategoryGroupID, Link.CompanyID FROM Link, LinkCategory where Link.CategoryID = LinkCategory.ID and ( Link.CompanyID ={0} or Link.CompanyID is null) union all SELECT SiteLink.ID,SiteLink.LinkTypeCD, LinkCategory.Title as LinkCategoryTitle, SiteLink.CategoryID, 'CAT-' &amp; SiteLink.SiteCategoryID as PageID, SiteLink.Title as LinkTitle, SiteLink.Description, SiteLink.URL, SiteLink.DateAdd, SiteLink.Ranks, SiteLink.Views, SiteLink.UserName, SiteLink.UserID, SiteLink.ASIN, SiteLink.Ranks,  'SiteLink' as LinkSource, SiteLink.SiteCategoryTypeID, SiteLink.SiteCategoryGroupID, SiteLink.CompanyID FROM SiteLink, LinkCategory where SiteLink.CategoryID = LinkCategory.ID and ( SiteLink.CompanyID ={0} or SiteLink.CompanyID is null) and ( SiteLink.SiteCategoryTypeID ={1} or SiteLink.SiteCategoryTypeID is null) ORDER BY 15 </value>
    <comment>GetSiteCategoryLinks description</comment>
  </data>
  <data name="GetSiteGroupList" xml:space="preserve">
    <value>SELECT SiteCategoryGroup.[SiteCategoryGroupID], SiteCategoryGroup.[SiteCategoryGroupNM], SiteCategoryGroup.[SiteCategoryGroupDS], SiteCategoryGroup.[SiteCategoryGroupOrder]FROM SiteCategoryGroup;</value>
    <comment>GetSiteGroupList description</comment>
  </data>
  <data name="GetCompanyData" xml:space="preserve">
    <value>SELECT Company.CompanyID,  Company.CompanyName,  Company.GalleryFolder,  Company.SiteURL,  Company.SiteTitle,  Company.SiteTemplate,  Company.DefaultSiteTemplate,  Company.HomePageID,  Company.DefaultArticleID,  Company.ActiveFL,  Company.UseBreadCrumbURL,  Company.SiteCategoryTypeID,  Company.DefaultPaymentTerms,  Company.DefaultInvoiceDescription,  Company.City,  Company.StateOrProvince,  Company.PostalCode,  Company.Country,  Company.FromEmail, Company.SMTP, Company.Component, SiteCategoryType.SiteCategoryTypeNM,  SiteCategoryType.SiteCategoryTypeDS,  SiteCategoryType.DefaultSiteCategoryID   FROM SiteCategoryType RIGHT JOIN Company ON SiteCategoryType.[SiteCategoryTypeID] = Company.[SiteCategoryTypeID] WHERE Company.CompanyID={0} </value>
    <comment>GetCompanyData description</comment>
  </data>
  <data name="GetPageAliasList" xml:space="preserve">
    <value>SELECT PageAliasID, PageURL, TargetURL, AliasType from PageAlias where [CompanyID]={0} </value>
    <comment>GetPageAliasList description</comment>
  </data>
  <data name="GetSiteLinks" xml:space="preserve">
    <value>SELECT Link.ID,Link.LinkTypeCD, LinkCategory.Title as LinkCategoryTitle, Link.CategoryID, Link.PageID,Link.Title as LinkTitle, Link.Description, Link.URL, Link.DateAdd, Link.Ranks, Link.Views, Link.UserName, Link.UserID, Link.ASIN, 'Link' as LinkSource, '' as SiteCategoryTypeID, Link.SiteCategoryGroupID, Link.CompanyID FROM Link, LinkCategory where Link.CategoryID = LinkCategory.ID and ( Link.CompanyID ={0} or Link.CompanyID is null) ORDER BY Link.Ranks</value>
    <comment>GetSiteLinks description</comment>
  </data>
  <data name="GetSiteTypeParameter" xml:space="preserve">
    <value>SELECT CompanySiteTypeParameter.CompanySiteTypeParameterID,  CompanySiteTypeParameter.CompanyID,  CompanySiteTypeParameter.SiteParameterTypeID,  CompanySiteTypeParameter.SortOrder,  CompanySiteTypeParameter.ParameterValue,  CompanySiteTypeParameter.SiteCategoryGroupID,  CompanySiteTypeParameter.SiteCategoryID,  CompanySiteTypeParameter.ParameterValue,  CompanySiteTypeParameter.SiteCategoryTypeID, SiteParameterType.SiteParameterTypeID,  SiteParameterType.SiteParameterTypeNM,  SiteParameterType.SiteParameterTypeDS,  SiteParameterType.SiteParameterTypeOrder,  SiteParameterType.SiteParameterTemplate  FROM SiteParameterType  LEFT JOIN CompanySiteTypeParameter ON SiteParameterType.[SiteParameterTypeID] = CompanySiteTypeParameter.[SiteParameterTypeID]  WHERE  CompanySiteTypeParameter.CompanySiteTypeParameterID={0} </value>
    <comment>GetSiteTypeParameter description</comment>
  </data>
  <data name="GetImageList" xml:space="preserve">
    <value>SELECT Image.[ImageID], Image.[ImageName], Image.[ImageFileName], Image.[ImageThumbFileName], Image.[ImageDescription], Image.[ImageComment], Image.[ImageDate], Image.[Active], Image.[ModifiedDT], Image.[VersionNo], Image.[ContactID], Image.[CompanyID], Image.[Title], Image.[Medium], Image.[Size], Image.[Price], Image.[Color], Image.[Subject], Image.[Sold] FROM [Image] where [CompanyID]={0} </value>
    <comment>GetImageList description</comment>
  </data>
  <data name="GetUnlinkedImageList" xml:space="preserve">
    <value>SELECT Image.[ImageID], Image.[ImageName], Image.[ImageFileName], Image.[ImageThumbFileName], Image.[ImageDescription], Image.[ImageComment], Image.[ImageDate], Image.[Active], Image.[ModifiedDT], Image.[VersionNo], Image.[ContactID], Image.[CompanyID], Image.[Title], Image.[Medium], Image.[Size], Image.[Price], Image.[Color], Image.[Subject], Image.[Sold] FROM [Image]  LEFT JOIN [PageImage] ON [Image].[ImageID] = [PageImage].[ImageID]  WHERE [PageImage].[PageID] Is Null and [CompanyID]={0} </value>
    <comment>GetUnlinkedImageList description</comment>
  </data>
  <data name="GetImageByImageID" xml:space="preserve">
    <value>SELECT Image.[ImageID], Image.[ImageName], Image.[ImageFileName], Image.[ImageThumbFileName], Image.[ImageDescription], Image.[ImageComment], Image.[ImageDate], Image.[Active], Image.[ModifiedDT], Image.[VersionNo], Image.[ContactID], Image.[CompanyID], Image.[Title], Image.[Medium], Image.[Size], Image.[Price], Image.[Color], Image.[Subject], Image.[Sold] FROM [Image] where [ImageID]={0} </value>
    <comment>GetImageByImageID description</comment>
  </data>
  <data name="GetPageImageByCompanyID" xml:space="preserve">
    <value>SELECT [Page].[PageID], [Page].[PageName], [Page].[PageDescription], [Page].[PageKeywords], [Page].[ImagesPerRow], [Page].[RowsPerPage], [PageImage].[PageImagePosition], [Image].[ImageID], [Image].[ImageName], [Image].[ImageFileName], [Image].[ImageThumbFileName], [Image].[ImageDescription], [Image].[ImageComment], [Image].[ImageDate], [Image].[ModifiedDT], [Image].[VersionNo], [Image].[ContactID], [Image].[title],  [Image].[medium],  [Image].[size] FROM [Page],[PageImage],[Image] WHERE [Page].[PageID] = [PageImage].[PageID] AND [Image].[ImageID] = [PageImage].[ImageID] AND [Page].[CompanyID] = {0} ORDER BY [PageImage].[PageImagePosition] </value>
    <comment>GetPageImageByCompanyID description</comment>
  </data>
  <data name="GetPageImageByPageID" xml:space="preserve">
    <value>SELECT [Page].[PageID], [Page].[PageName], [Page].[PageDescription], [Page].[PageKeywords], [Page].[ImagesPerRow], [Page].[RowsPerPage], [Page].[PageFileName], [PageImage].[PageImagePosition], [Image].[ImageID], [Image].[ImageName], [Image].[ImageFileName], [Image].[ImageThumbFileName], [Image].[ImageDescription], [Image].[ImageComment], [Image].[ImageDate], [Image].[ModifiedDT], [Image].[VersionNo], [Image].[ContactID], [Image].[title],  [Image].[Price], [Image].[Color], [Image].[Subject], [Image].[Sold], [Image].[medium],  [Image].[size] FROM [Page],[PageImage],[Image] WHERE [Page].[PageID] = [PageImage].[PageID] AND [Image].[ImageID] = [PageImage].[ImageID] AND [Page].[CompanyID] = {0} AND [Page].[PageID] = {1} AND [Page].[GroupID] &gt;= {2} AND [Page].[Active] = TRUE AND [Image].[Active]= TRUE ORDER BY [PageImage].[PageImagePosition] </value>
    <comment>GetPageImageByPageID description</comment>
  </data>
  <data name="GetSiteMapByGroup" xml:space="preserve">
    <value>SELECT Page.PageID, Article.Title AS PageName,  Article.Title AS PageTitle,  Article.Description,  Page.ParentPageID,  'Article' AS PageSource,  Page.PageKeywords,  IIf(pagetype.PageFileName Is Null,"/default.aspx",pagetype.PageFileName) AS TransferURL, Page.PageFileName, Article.StartDT as ModifiedDT, Article.ArticleID, Article.Active, Page.PageOrder,  Page.SiteCategoryID, ' ' as SiteCategoryName, ' ' as SiteCategoryGroupName, ' ' as SiteCategoryGroupID, IIf(pagetype.PageTypeCD Is Null,'Article',pagetype.PageTypeCD) AS PageTypeCD FROM (Page RIGHT JOIN Article ON Page.PageID = Article.PageID)   LEFT JOIN pagetype ON Page.PageTypeID = pagetype.PageTypeID  WHERE (((Article.CompanyID)={0} )  AND ((Page.PageName)&lt;&gt;[Article].[Title])  AND ((Page.GroupID)&gt;= {1} )  AND ((Page.CompanyID)={0} )) OR (((Article.CompanyID)={0} )  AND ((Page.PageName) Is Null)  AND ((Page.GroupID) Is Null) AND ((Page.CompanyID) Is Null)) union SELECT Page.PageID, Page.PageName, Page.PageTitle, Page.PageDescription, Page.ParentPageID, 'Page' AS RecordSource, Page.PageKeywords, pagetype.PageFileName AS TransferURL, Page.PageFileName, Page.ModifiedDT, Null AS ArticleID, Page.Active, IIf([Page].[PageOrder] Is Null,0,[Page].[PageOrder]), Page.SiteCategoryID, SiteCategory.CategoryName, IIf(SiteCategoryGroup.SiteCategoryGroupNM Is Null,SiteCategoryGroup_Page.SiteCategoryGroupNM,SiteCategoryGroup.SiteCategoryGroupNM) AS SiteCategoryGroupNM, IIf(SiteCategoryGroup.SiteCategoryGroupID Is Null,SiteCategoryGroup_Page.SiteCategoryGroupID,SiteCategoryGroup.SiteCategoryGroupID) AS SiteCategoryGroupID, IIf(pagetype.PageTypeCD Is Null,'Article',pagetype.PageTypeCD) AS PageTypeCD FROM (((Page LEFT JOIN PageType ON Page.PageTypeID = PageType.PageTypeID) LEFT JOIN SiteCategory ON Page.SiteCategoryID = SiteCategory.SiteCategoryID) LEFT JOIN SiteCategoryGroup ON SiteCategory.SiteCategoryGroupID = SiteCategoryGroup.SiteCategoryGroupID) LEFT JOIN SiteCategoryGroup AS SiteCategoryGroup_Page ON Page.SiteCategoryGroupID = SiteCategoryGroup_Page.SiteCategoryGroupID WHERE (((Page.GroupID)&gt;={1}) AND ((Page.CompanyID)={0}))  union SELECT Page.PageID,Page.PageName &amp; '-' &amp; Image.ImageName AS PageName, Page.PageName &amp; '-' &amp; Image.ImageName AS PageTitle, Image.ImageDescription, Page.ParentPageID, 'Image' AS PageSource, Page.PageKeywords, IIf([pagetype].[PageFileName] Is Null,"/default.aspx",[pagetype].[PageFileName]) AS TransferURL, Page.PageFileName, Page.ModifiedDT, Image.ImageID, Image.Active,Page.PageOrder,  Page.SiteCategoryID, ' ' as SiteCategoryName, ' ' as SiteCategoryGroupName, ' ' as SiteCategoryGroupID, IIf(pagetype.PageTypeCD Is Null,'Image',pagetype.PageTypeCD) AS PageTypeCD FROM [Image] INNER JOIN ((Page LEFT JOIN pagetype ON Page.PageTypeID = pagetype.PageTypeID) INNER JOIN PageImage ON Page.PageID = PageImage.PageID) ON Image.ImageID = PageImage.ImageID WHERE (((Image.CompanyID)={0}) AND ((Page.PageName)&lt;&gt;[Image].[ImageName]) AND ((Page.GroupID)&gt;= {1}) AND ((Page.CompanyID)={0})) OR (((Image.CompanyID)={0}) AND ((Page.PageName) Is Null) AND ((Page.GroupID) Is Null) AND ((Page.CompanyID) Is Null)) union SELECT SiteCategory.SiteCategoryID as PageID, SiteCategory.CategoryName as PageName, SiteCategory.CategoryTitle as PageTitle, SiteCategory.CategoryDescription as Description, SiteCategory.ParentCategoryID as ParentPageID , 'Category' as PageSource, SiteCategory.CategoryKeywords as PageKeywords, IIf(SiteCategoryType.SiteCategoryFileName Is Null,"/default.aspx",SiteCategoryType.SiteCategoryFileName) AS TransferURL, SiteCategory.CategoryFileName as PageFileName, now() as ModifiedDT, NULL as ArticleID, TRUE as Active, SiteCategory.GroupOrder as PageOrder, SiteCategory.SiteCategoryID, SiteCategory.CategoryName  as SiteCategoryName, SiteCategoryGroup.SiteCategoryGroupNM as SiteCategoryGroupName, SiteCategoryGroup.SiteCategoryGroupID as SiteCategoryGroupID, 'SITECAT' as PageTypeCD FROM SiteCategoryGroup, SiteCategoryType, SiteCategory,Company WHERE SiteCategoryType.SiteCategoryTypeID = SiteCategory.SiteCategoryTypeID AND SiteCategoryGroup.SiteCategoryGroupID = SiteCategory.SiteCategoryGroupID AND SiteCategoryType.SiteCategoryTypeID = Company.SiteCategoryTypeID AND Company.CompanyID ={0} </value>
    <comment>GetSiteMapGroupLessThanThree description</comment>
  </data>
  <data name="GetSiteMapByGroupAnon" xml:space="preserve">
    <value>SELECT Page.PageID, Article.Title as PageName,  Article.Title as PageTitle,  Article.Description,  Page.ParentPageID,  'Article' AS PageSource,  Page.PageKeywords,  IIf(pagetype.PageFileName Is Null,"/default.aspx",pagetype.PageFileName) AS TransferURL, Page.PageFileName, Article.StartDT as ModifiedDT, Article.ArticleID, Article.Active, Page.PageOrder,  Page.SiteCategoryID, ' ' as SiteCategoryName, ' ' as SiteCategoryGroupName, ' ' as SiteCategoryGroupID, IIf(pagetype.PageTypeCD Is Null,'Article',pagetype.PageTypeCD) AS PageTypeCD FROM (Page RIGHT JOIN Article ON Page.PageID = Article.PageID)   LEFT JOIN pagetype ON Page.PageTypeID = pagetype.PageTypeID  WHERE (((Article.CompanyID)={0} )  AND ((Article.Active=TRUE)) AND ((Page.PageName)&lt;&gt;[Article].[Title])  AND ((Page.GroupID)&gt;= {1} )  AND ((Page.CompanyID)={0} )) OR (((Article.CompanyID)={0} )  AND ((Page.PageName) Is Null)  AND ((Page.GroupID) Is Null) AND ((Page.CompanyID) Is Null)) union SELECT Page.PageID, Page.PageName, Page.PageTitle, Page.PageDescription, Page.ParentPageID, 'Page' AS RecordSource, Page.PageKeywords, pagetype.PageFileName AS TransferURL, Page.PageFileName, Page.ModifiedDT, Null AS ArticleID, Page.Active, IIf([Page].[PageOrder] Is Null,0,[Page].[PageOrder]), Page.SiteCategoryID, SiteCategory.CategoryName, IIf(SiteCategoryGroup.SiteCategoryGroupNM Is Null,SiteCategoryGroup_Page.SiteCategoryGroupNM,SiteCategoryGroup.SiteCategoryGroupNM) AS SiteCategoryGroupNM, IIf(SiteCategoryGroup.SiteCategoryGroupID Is Null,SiteCategoryGroup_Page.SiteCategoryGroupID,SiteCategoryGroup.SiteCategoryGroupID) AS SiteCategoryGroupID, IIf(pagetype.PageTypeCD Is Null,'Article',pagetype.PageTypeCD) AS PageTypeCD FROM (((Page LEFT JOIN PageType ON Page.PageTypeID = PageType.PageTypeID) LEFT JOIN SiteCategory ON Page.SiteCategoryID = SiteCategory.SiteCategoryID) LEFT JOIN SiteCategoryGroup ON SiteCategory.SiteCategoryGroupID = SiteCategoryGroup.SiteCategoryGroupID) LEFT JOIN SiteCategoryGroup AS SiteCategoryGroup_Page ON Page.SiteCategoryGroupID = SiteCategoryGroup_Page.SiteCategoryGroupID WHERE (((Page.Active)=True) AND ((Page.GroupID)&gt;={1}) AND ((Page.CompanyID)={0}))  union SELECT Page.PageID, Page.PageName &amp; '-' &amp; Image.ImageName AS PageName,  Page.PageName &amp; '-' &amp; Image.ImageName AS PageTitle, Image.ImageDescription, Page.ParentPageID, 'Image' AS PageSource, Page.PageKeywords, IIf([pagetype].[PageFileName] Is Null,"/default.aspx",[pagetype].[PageFileName]) AS TransferURL, Page.PageFileName, Page.ModifiedDT, Image.ImageID, Image.Active,Page.PageOrder,  Page.SiteCategoryID, ' ' as SiteCategoryName, ' ' as SiteCategoryGroupName, ' ' as SiteCategoryGroupID, IIf(pagetype.PageTypeCD Is Null,'Article',pagetype.PageTypeCD) AS PageTypeCD FROM [Image] INNER JOIN ((Page LEFT JOIN pagetype ON Page.PageTypeID = pagetype.PageTypeID) INNER JOIN PageImage ON Page.PageID = PageImage.PageID) ON Image.ImageID = PageImage.ImageID WHERE (((Image.CompanyID)={0}) AND ((Image.Active=TRUE)) AND ((Page.PageName)&lt;&gt;[Image].[ImageName]) AND ((Page.GroupID)&gt;= {1}) AND ((Page.CompanyID)={0})) OR (((Image.CompanyID)={0}) AND ((Page.PageName) Is Null) AND ((Page.GroupID) Is Null) AND ((Page.CompanyID) Is Null)) union SELECT SiteCategory.SiteCategoryID as PageID, SiteCategory.CategoryName as PageName, SiteCategory.CategoryTitle as PageTitle, SiteCategory.CategoryDescription as Description, SiteCategory.ParentCategoryID as ParentPageID , 'Category' as PageSource, SiteCategory.CategoryKeywords as PageKeywords, IIf(SiteCategoryType.SiteCategoryFileName Is Null,"/default.aspx",SiteCategoryType.SiteCategoryFileName) AS TransferURL, SiteCategory.CategoryFileName as PageFileName, now() as ModifiedDT, NULL as ArticleID, TRUE as Active, SiteCategory.GroupOrder as PageOrder, SiteCategory.SiteCategoryID, SiteCategory.CategoryName  as SiteCategoryName, SiteCategoryGroup.SiteCategoryGroupNM as SiteCategoryGroupName, SiteCategoryGroup.SiteCategoryGroupID as SiteCategoryGroupID, 'SITECAT' FROM SiteCategoryGroup, SiteCategoryType, SiteCategory,Company WHERE SiteCategoryType.SiteCategoryTypeID = SiteCategory.SiteCategoryTypeID AND SiteCategoryGroup.SiteCategoryGroupID = SiteCategory.SiteCategoryGroupID AND SiteCategoryType.SiteCategoryTypeID = Company.SiteCategoryTypeID AND Company.CompanyID ={0} </value>
    <comment>SELECTPagePageIDArticleTitleAsPageNameArti description</comment>
  </data>
  <data name="GetContactByLogonPassword" xml:space="preserve">
    <value>SELECT Contact.ContactID, Contact.LogonName, Contact.PrimaryContact,  Contact.GroupID,  Contact.LogonPassword,  Contact.Active,  Contact.EMail,  Contact.TemplatePrefix,  Company.CompanyID,  Company.CompanyName,  Company.GalleryFolder,  Company.SiteURL,  Company.SiteTitle,  Company.SiteTemplate, Company.DefaultArticleID, Company.HomePageID, Company.DefaultSiteTemplate, '' as RoleTitle, '' as RoleID, 'False' as FilterMenu FROM Contact, Company  WHERE Contact.CompanyID=Company.CompanyID AND Contact.LogonName = '{0}' AND Contact.LogonPassword = '{1}' </value>
    <comment>GetContactByLogonPassword description</comment>
  </data>
  <data name="UpdateUserOptions" xml:space="preserve">
    <value>UPDATE [contact] SET [contact].[CreateDT]='{0}'  WHERE [contact].[ContactID]={1} </value>
    <comment>UpdateUserOptions description</comment>
  </data>
</root>