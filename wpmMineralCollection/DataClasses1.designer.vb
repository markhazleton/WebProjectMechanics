'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="MineralCollection")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
	Partial Private Sub InsertCollection(instance As Collection)
	End Sub
	Partial Private Sub UpdateCollection(instance As Collection)
	End Sub
	Partial Private Sub DeleteCollection(instance As Collection)
	End Sub
	Partial Private Sub InsertMineral(instance As Mineral)
	End Sub
	Partial Private Sub UpdateMineral(instance As Mineral)
	End Sub
	Partial Private Sub DeleteMineral(instance As Mineral)
	End Sub
	Partial Private Sub InsertCollectionItem(instance As CollectionItem)
	End Sub
	Partial Private Sub UpdateCollectionItem(instance As CollectionItem)
	End Sub
	Partial Private Sub DeleteCollectionItem(instance As CollectionItem)
	End Sub
	Partial Private Sub InsertCollectionItemImage(instance As CollectionItemImage)
	End Sub
	Partial Private Sub UpdateCollectionItemImage(instance As CollectionItemImage)
	End Sub
	Partial Private Sub DeleteCollectionItemImage(instance As CollectionItemImage)
	End Sub
	Partial Private Sub InsertCollectionItemMineral(instance As CollectionItemMineral)
	End Sub
	Partial Private Sub UpdateCollectionItemMineral(instance As CollectionItemMineral)
	End Sub
	Partial Private Sub DeleteCollectionItemMineral(instance As CollectionItemMineral)
	End Sub
	Partial Private Sub InsertCompany(instance As Company)
	End Sub
	Partial Private Sub UpdateCompany(instance As Company)
	End Sub
	Partial Private Sub DeleteCompany(instance As Company)
	End Sub
	Partial Private Sub InsertLocationCity(instance As LocationCity)
	End Sub
	Partial Private Sub UpdateLocationCity(instance As LocationCity)
	End Sub
	Partial Private Sub DeleteLocationCity(instance As LocationCity)
	End Sub
	Partial Private Sub InsertLocationCountry(instance As LocationCountry)
	End Sub
	Partial Private Sub UpdateLocationCountry(instance As LocationCountry)
	End Sub
	Partial Private Sub DeleteLocationCountry(instance As LocationCountry)
	End Sub
	Partial Private Sub InsertLocationState(instance As LocationState)
	End Sub
	Partial Private Sub UpdateLocationState(instance As LocationState)
	End Sub
	Partial Private Sub DeleteLocationState(instance As LocationState)
	End Sub
#End Region

	Public Sub New()
		MyBase.New(Global.wpmMineralCollection.My.MySettings.Default.MineralCollectionConnectionString1, mappingSource)
		OnCreated
	End Sub

	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub

	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub

	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub

	Public ReadOnly Property Collections() As System.Data.Linq.Table(Of Collection)
		Get
			Return Me.GetTable(Of Collection)
		End Get
	End Property

	Public ReadOnly Property Minerals() As System.Data.Linq.Table(Of Mineral)
		Get
			Return Me.GetTable(Of Mineral)
		End Get
	End Property

	Public ReadOnly Property CollectionItems() As System.Data.Linq.Table(Of CollectionItem)
		Get
			Return Me.GetTable(Of CollectionItem)
		End Get
	End Property

	Public ReadOnly Property CollectionItemImages() As System.Data.Linq.Table(Of CollectionItemImage)
		Get
			Return Me.GetTable(Of CollectionItemImage)
		End Get
	End Property

	Public ReadOnly Property CollectionItemMinerals() As System.Data.Linq.Table(Of CollectionItemMineral)
		Get
			Return Me.GetTable(Of CollectionItemMineral)
		End Get
	End Property

	Public ReadOnly Property Companies() As System.Data.Linq.Table(Of Company)
		Get
			Return Me.GetTable(Of Company)
		End Get
	End Property

	Public ReadOnly Property LocationCities() As System.Data.Linq.Table(Of LocationCity)
		Get
			Return Me.GetTable(Of LocationCity)
		End Get
	End Property

	Public ReadOnly Property LocationCountries() As System.Data.Linq.Table(Of LocationCountry)
		Get
			Return Me.GetTable(Of LocationCountry)
		End Get
	End Property

	Public ReadOnly Property LocationStates() As System.Data.Linq.Table(Of LocationState)
		Get
			Return Me.GetTable(Of LocationState)
		End Get
	End Property

	Public ReadOnly Property vwSpecimenImages() As System.Data.Linq.Table(Of vwSpecimenImage)
		Get
			Return Me.GetTable(Of vwSpecimenImage)
		End Get
	End Property

	Public ReadOnly Property vwCollectionItemImages() As System.Data.Linq.Table(Of vwCollectionItemImage)
		Get
			Return Me.GetTable(Of vwCollectionItemImage)
		End Get
	End Property

	Public ReadOnly Property vwCollectionItems() As System.Data.Linq.Table(Of vwCollectionItem)
		Get
			Return Me.GetTable(Of vwCollectionItem)
		End Get
	End Property

	Public ReadOnly Property vwMineralCollectionItems() As System.Data.Linq.Table(Of vwMineralCollectionItem)
		Get
			Return Me.GetTable(Of vwMineralCollectionItem)
		End Get
	End Property

	Public ReadOnly Property vwSpecimenImage1s() As System.Data.Linq.Table(Of vwSpecimenImage1)
		Get
			Return Me.GetTable(Of vwSpecimenImage1)
		End Get
	End Property

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_RelatedCollectionItem_SelectByMineralID")>
	Public Function usp_RelatedCollectionItem_SelectByMineralID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MineralID", DbType:="Int")> ByVal mineralID As System.Nullable(Of Integer)) As ISingleResult(Of usp_RelatedCollectionItem_SelectByMineralIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), mineralID)
		Return CType(result.ReturnValue, ISingleResult(Of usp_RelatedCollectionItem_SelectByMineralIDResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.usp_RelatedCollectionItem_SelectByCollectionItemID")>
	Public Function usp_RelatedCollectionItem_SelectByCollectionItemID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionItemID", DbType:="Int")> ByVal collectionItemID As System.Nullable(Of Integer)) As ISingleResult(Of usp_RelatedCollectionItem_SelectByCollectionItemIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionItemID)
		Return CType(result.ReturnValue, ISingleResult(Of usp_RelatedCollectionItem_SelectByCollectionItemIDResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_Collection_Delete")>
	Public Function gsp_Collection_Delete(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionID", DbType:="Int")> ByVal collectionID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionID)
		Return CType(result.ReturnValue, Integer)
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_Collection_Insert")>
	Public Function gsp_Collection_Insert(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionNM", DbType:="NVarChar(255)")> ByVal collectionNM As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionDS", DbType:="NVarChar(MAX)")> ByVal collectionDS As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date)) As ISingleResult(Of gsp_Collection_InsertResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionNM, collectionDS, modifiedID, modifiedDT)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_Collection_InsertResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_Collection_Select")>
	Public Function gsp_Collection_Select(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionID", DbType:="Int")> ByVal collectionID As System.Nullable(Of Integer)) As ISingleResult(Of gsp_Collection_SelectResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionID)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_Collection_SelectResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_Collection_Update")>
	Public Function gsp_Collection_Update(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionID", DbType:="Int")> ByVal collectionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionNM", DbType:="NVarChar(255)")> ByVal collectionNM As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionDS", DbType:="NVarChar(MAX)")> ByVal collectionDS As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date)) As ISingleResult(Of gsp_Collection_UpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionID, collectionNM, collectionDS, modifiedID, modifiedDT)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_Collection_UpdateResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_CollectionItem_Delete")>
	Public Function gsp_CollectionItem_Delete(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionItemID", DbType:="Int")> ByVal collectionItemID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionItemID)
		Return CType(result.ReturnValue, Integer)
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_CollectionItem_Insert")>
	Public Function gsp_CollectionItem_Insert(
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionID", DbType:="Int")> ByVal collectionID As System.Nullable(Of Integer),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SpecimenNumber", DbType:="Float")> ByVal specimenNumber As System.Nullable(Of Double),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nickname", DbType:="NVarChar(255)")> ByVal nickname As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PrimaryMineralID", DbType:="Int")> ByVal primaryMineralID As System.Nullable(Of Integer),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MineralVariety", DbType:="NVarChar(255)")> ByVal mineralVariety As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MineNM", DbType:="NVarChar(255)")> ByVal mineNM As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PurchaseDate", DbType:="DateTime")> ByVal purchaseDate As System.Nullable(Of Date),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PurchasePrice", DbType:="Money")> ByVal purchasePrice As System.Nullable(Of Decimal),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Value", DbType:="Money")> ByVal value As System.Nullable(Of Decimal),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ShowWherePurchased", DbType:="NVarChar(255)")> ByVal showWherePurchased As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PurchasedFromCompanyID", DbType:="Int")> ByVal purchasedFromCompanyID As System.Nullable(Of Integer),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StorageLocation", DbType:="NVarChar(255)")> ByVal storageLocation As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SpecimenNotes", DbType:="NVarChar(MAX)")> ByVal specimenNotes As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Description", DbType:="NVarChar(MAX)")> ByVal description As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ExCollection", DbType:="NVarChar(255)")> ByVal exCollection As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="HeightCm", DbType:="Float")> ByVal heightCm As System.Nullable(Of Double),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="WidthCm", DbType:="Float")> ByVal widthCm As System.Nullable(Of Double),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ThicknessCm", DbType:="Float")> ByVal thicknessCm As System.Nullable(Of Double),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="HeightIn", DbType:="Float")> ByVal heightIn As System.Nullable(Of Double),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="WidthIn", DbType:="Float")> ByVal widthIn As System.Nullable(Of Double),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ThicknessIn", DbType:="Float")> ByVal thicknessIn As System.Nullable(Of Double),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="WeightGr", DbType:="NVarChar(255)")> ByVal weightGr As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="WeightKg", DbType:="NVarChar(255)")> ByVal weightKg As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SaleDT", DbType:="DateTime")> ByVal saleDT As System.Nullable(Of Date),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SalePrice", DbType:="Money")> ByVal salePrice As System.Nullable(Of Decimal),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationCityID", DbType:="Int")> ByVal locationCityID As System.Nullable(Of Integer),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationStateID", DbType:="Int")> ByVal locationStateID As System.Nullable(Of Integer),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationCountryID", DbType:="Int")> ByVal locationCountryID As System.Nullable(Of Integer),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IsFeatured", DbType:="Int")> ByVal isFeatured As System.Nullable(Of Integer)) As ISingleResult(Of gsp_CollectionItem_InsertResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionID, specimenNumber, nickname, primaryMineralID, mineralVariety, mineNM, purchaseDate, purchasePrice, value, showWherePurchased, purchasedFromCompanyID, storageLocation, specimenNotes, description, exCollection, heightCm, widthCm, thicknessCm, heightIn, widthIn, thicknessIn, weightGr, weightKg, saleDT, salePrice, locationCityID, locationStateID, locationCountryID, modifiedID, modifiedDT, isFeatured)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_CollectionItem_InsertResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_CollectionItem_Select")>
	Public Function gsp_CollectionItem_Select(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionItemID", DbType:="Int")> ByVal collectionItemID As System.Nullable(Of Integer)) As ISingleResult(Of gsp_CollectionItem_SelectResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionItemID)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_CollectionItem_SelectResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_CollectionItem_Update")>
	Public Function gsp_CollectionItem_Update(
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionItemID", DbType:="Int")> ByVal collectionItemID As System.Nullable(Of Integer),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionID", DbType:="Int")> ByVal collectionID As System.Nullable(Of Integer),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SpecimenNumber", DbType:="Float")> ByVal specimenNumber As System.Nullable(Of Double),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nickname", DbType:="NVarChar(255)")> ByVal nickname As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PrimaryMineralID", DbType:="Int")> ByVal primaryMineralID As System.Nullable(Of Integer),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MineralVariety", DbType:="NVarChar(255)")> ByVal mineralVariety As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MineNM", DbType:="NVarChar(255)")> ByVal mineNM As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PurchaseDate", DbType:="DateTime")> ByVal purchaseDate As System.Nullable(Of Date),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PurchasePrice", DbType:="Money")> ByVal purchasePrice As System.Nullable(Of Decimal),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Value", DbType:="Money")> ByVal value As System.Nullable(Of Decimal),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ShowWherePurchased", DbType:="NVarChar(255)")> ByVal showWherePurchased As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PurchasedFromCompanyID", DbType:="Int")> ByVal purchasedFromCompanyID As System.Nullable(Of Integer),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StorageLocation", DbType:="NVarChar(255)")> ByVal storageLocation As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SpecimenNotes", DbType:="NVarChar(MAX)")> ByVal specimenNotes As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Description", DbType:="NVarChar(MAX)")> ByVal description As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ExCollection", DbType:="NVarChar(255)")> ByVal exCollection As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="HeightCm", DbType:="Float")> ByVal heightCm As System.Nullable(Of Double),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="WidthCm", DbType:="Float")> ByVal widthCm As System.Nullable(Of Double),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ThicknessCm", DbType:="Float")> ByVal thicknessCm As System.Nullable(Of Double),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="HeightIn", DbType:="Float")> ByVal heightIn As System.Nullable(Of Double),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="WidthIn", DbType:="Float")> ByVal widthIn As System.Nullable(Of Double),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ThicknessIn", DbType:="Float")> ByVal thicknessIn As System.Nullable(Of Double),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="WeightGr", DbType:="NVarChar(255)")> ByVal weightGr As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="WeightKg", DbType:="NVarChar(255)")> ByVal weightKg As String,
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SaleDT", DbType:="DateTime")> ByVal saleDT As System.Nullable(Of Date),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SalePrice", DbType:="Money")> ByVal salePrice As System.Nullable(Of Decimal),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationCityID", DbType:="Int")> ByVal locationCityID As System.Nullable(Of Integer),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationStateID", DbType:="Int")> ByVal locationStateID As System.Nullable(Of Integer),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationCountryID", DbType:="Int")> ByVal locationCountryID As System.Nullable(Of Integer),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date),
				<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IsFeatured", DbType:="Int")> ByVal isFeatured As System.Nullable(Of Integer)) As ISingleResult(Of gsp_CollectionItem_UpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionItemID, collectionID, specimenNumber, nickname, primaryMineralID, mineralVariety, mineNM, purchaseDate, purchasePrice, value, showWherePurchased, purchasedFromCompanyID, storageLocation, specimenNotes, description, exCollection, heightCm, widthCm, thicknessCm, heightIn, widthIn, thicknessIn, weightGr, weightKg, saleDT, salePrice, locationCityID, locationStateID, locationCountryID, modifiedID, modifiedDT, isFeatured)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_CollectionItem_UpdateResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_CollectionItemImage_Delete")>
	Public Function gsp_CollectionItemImage_Delete(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionItemImageID", DbType:="Int")> ByVal collectionItemImageID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionItemImageID)
		Return CType(result.ReturnValue, Integer)
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_CollectionItemImage_Insert")>
	Public Function gsp_CollectionItemImage_Insert(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionItemID", DbType:="Int")> ByVal collectionItemID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ImageType", DbType:="NVarChar(255)")> ByVal imageType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DisplayOrder", DbType:="Int")> ByVal displayOrder As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ImageNM", DbType:="NVarChar(255)")> ByVal imageNM As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ImageDS", DbType:="NVarChar(MAX)")> ByVal imageDS As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ImageFileNM", DbType:="NVarChar(255)")> ByVal imageFileNM As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date)) As ISingleResult(Of gsp_CollectionItemImage_InsertResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionItemID, imageType, displayOrder, imageNM, imageDS, imageFileNM, modifiedID, modifiedDT)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_CollectionItemImage_InsertResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_CollectionItemImage_Select")>
	Public Function gsp_CollectionItemImage_Select(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionItemImageID", DbType:="Int")> ByVal collectionItemImageID As System.Nullable(Of Integer)) As ISingleResult(Of gsp_CollectionItemImage_SelectResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionItemImageID)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_CollectionItemImage_SelectResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_CollectionItemImage_Update")>
	Public Function gsp_CollectionItemImage_Update(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionItemImageID", DbType:="Int")> ByVal collectionItemImageID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionItemID", DbType:="Int")> ByVal collectionItemID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ImageType", DbType:="NVarChar(255)")> ByVal imageType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DisplayOrder", DbType:="Int")> ByVal displayOrder As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ImageNM", DbType:="NVarChar(255)")> ByVal imageNM As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ImageDS", DbType:="NVarChar(MAX)")> ByVal imageDS As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ImageFileNM", DbType:="NVarChar(255)")> ByVal imageFileNM As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date)) As ISingleResult(Of gsp_CollectionItemImage_UpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionItemImageID, collectionItemID, imageType, displayOrder, imageNM, imageDS, imageFileNM, modifiedID, modifiedDT)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_CollectionItemImage_UpdateResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_CollectionItemMineral_Delete")>
	Public Function gsp_CollectionItemMineral_Delete(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionItemMineralID", DbType:="Int")> ByVal collectionItemMineralID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionItemMineralID)
		Return CType(result.ReturnValue, Integer)
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_CollectionItemMineral_Insert")>
	Public Function gsp_CollectionItemMineral_Insert(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionItemID", DbType:="Int")> ByVal collectionItemID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MineralID", DbType:="Int")> ByVal mineralID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Position", DbType:="Int")> ByVal position As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date)) As ISingleResult(Of gsp_CollectionItemMineral_InsertResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionItemID, mineralID, position, modifiedID, modifiedDT)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_CollectionItemMineral_InsertResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_CollectionItemMineral_Select")>
	Public Function gsp_CollectionItemMineral_Select(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionItemMineralID", DbType:="Int")> ByVal collectionItemMineralID As System.Nullable(Of Integer)) As ISingleResult(Of gsp_CollectionItemMineral_SelectResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionItemMineralID)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_CollectionItemMineral_SelectResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_CollectionItemMineral_Update")>
	Public Function gsp_CollectionItemMineral_Update(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionItemMineralID", DbType:="Int")> ByVal collectionItemMineralID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CollectionItemID", DbType:="Int")> ByVal collectionItemID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MineralID", DbType:="Int")> ByVal mineralID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Position", DbType:="Int")> ByVal position As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date)) As ISingleResult(Of gsp_CollectionItemMineral_UpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), collectionItemMineralID, collectionItemID, mineralID, position, modifiedID, modifiedDT)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_CollectionItemMineral_UpdateResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_LocationCity_Delete")>
	Public Function gsp_LocationCity_Delete(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationCityID", DbType:="Int")> ByVal locationCityID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), locationCityID)
		Return CType(result.ReturnValue, Integer)
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_LocationCity_Insert")>
	Public Function gsp_LocationCity_Insert(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="City", DbType:="NVarChar(255)")> ByVal city As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CityDS", DbType:="NVarChar(MAX)")> ByVal cityDS As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="County", DbType:="NVarChar(255)")> ByVal county As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Latitude", DbType:="NChar(10)")> ByVal latitude As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Longitude", DbType:="NChar(10)")> ByVal longitude As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationStateID", DbType:="Int")> ByVal locationStateID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationCountryID", DbType:="Int")> ByVal locationCountryID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date)) As ISingleResult(Of gsp_LocationCity_InsertResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), city, cityDS, county, latitude, longitude, locationStateID, locationCountryID, modifiedID, modifiedDT)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_LocationCity_InsertResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_LocationCity_Select")>
	Public Function gsp_LocationCity_Select(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationCityID", DbType:="Int")> ByVal locationCityID As System.Nullable(Of Integer)) As ISingleResult(Of gsp_LocationCity_SelectResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), locationCityID)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_LocationCity_SelectResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_LocationCity_Update")>
	Public Function gsp_LocationCity_Update(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationCityID", DbType:="Int")> ByVal locationCityID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="City", DbType:="NVarChar(255)")> ByVal city As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CityDS", DbType:="NVarChar(MAX)")> ByVal cityDS As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="County", DbType:="NVarChar(255)")> ByVal county As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Latitude", DbType:="NChar(10)")> ByVal latitude As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Longitude", DbType:="NChar(10)")> ByVal longitude As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationStateID", DbType:="Int")> ByVal locationStateID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationCountryID", DbType:="Int")> ByVal locationCountryID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date)) As ISingleResult(Of gsp_LocationCity_UpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), locationCityID, city, cityDS, county, latitude, longitude, locationStateID, locationCountryID, modifiedID, modifiedDT)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_LocationCity_UpdateResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_LocationState_Delete")>
	Public Function gsp_LocationState_Delete(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationStateID", DbType:="Int")> ByVal locationStateID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), locationStateID)
		Return CType(result.ReturnValue, Integer)
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_LocationState_Insert")>
	Public Function gsp_LocationState_Insert(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StateNM", DbType:="NVarChar(255)")> ByVal stateNM As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StateCD", DbType:="NVarChar(50)")> ByVal stateCD As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StateDS", DbType:="NVarChar(MAX)")> ByVal stateDS As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationCountryID", DbType:="Int")> ByVal locationCountryID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date)) As ISingleResult(Of gsp_LocationState_InsertResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), stateNM, stateCD, stateDS, locationCountryID, modifiedID, modifiedDT)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_LocationState_InsertResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_LocationState_Select")>
	Public Function gsp_LocationState_Select(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationStateID", DbType:="Int")> ByVal locationStateID As System.Nullable(Of Integer)) As ISingleResult(Of gsp_LocationState_SelectResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), locationStateID)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_LocationState_SelectResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_LocationState_Update")>
	Public Function gsp_LocationState_Update(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationStateID", DbType:="Int")> ByVal locationStateID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StateNM", DbType:="NVarChar(255)")> ByVal stateNM As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StateCD", DbType:="NVarChar(50)")> ByVal stateCD As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StateDS", DbType:="NVarChar(MAX)")> ByVal stateDS As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationCountryID", DbType:="Int")> ByVal locationCountryID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date)) As ISingleResult(Of gsp_LocationState_UpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), locationStateID, stateNM, stateCD, stateDS, locationCountryID, modifiedID, modifiedDT)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_LocationState_UpdateResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_Mineral_Delete")>
	Public Function gsp_Mineral_Delete(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MineralID", DbType:="Int")> ByVal mineralID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), mineralID)
		Return CType(result.ReturnValue, Integer)
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_Mineral_Insert")>
	Public Function gsp_Mineral_Insert(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MineralNM", DbType:="NVarChar(255)")> ByVal mineralNM As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MineralDS", DbType:="NVarChar(MAX)")> ByVal mineralDS As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="WikipediaURL", DbType:="NVarChar(255)")> ByVal wikipediaURL As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date)) As ISingleResult(Of gsp_Mineral_InsertResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), mineralNM, mineralDS, wikipediaURL, modifiedID, modifiedDT)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_Mineral_InsertResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_Mineral_Select")>
	Public Function gsp_Mineral_Select(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MineralID", DbType:="Int")> ByVal mineralID As System.Nullable(Of Integer)) As ISingleResult(Of gsp_Mineral_SelectResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), mineralID)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_Mineral_SelectResult))
	End Function

	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.gsp_Mineral_Update")>
	Public Function gsp_Mineral_Update(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MineralID", DbType:="Int")> ByVal mineralID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MineralNM", DbType:="NVarChar(255)")> ByVal mineralNM As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MineralDS", DbType:="NVarChar(MAX)")> ByVal mineralDS As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="WikipediaURL", DbType:="NVarChar(255)")> ByVal wikipediaURL As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedID", DbType:="Int")> ByVal modifiedID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ModifiedDT", DbType:="DateTime")> ByVal modifiedDT As System.Nullable(Of Date)) As ISingleResult(Of gsp_Mineral_UpdateResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod, MethodInfo), mineralID, mineralNM, mineralDS, wikipediaURL, modifiedID, modifiedDT)
		Return CType(result.ReturnValue, ISingleResult(Of gsp_Mineral_UpdateResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Collection")>
Partial Public Class Collection
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _CollectionID As Integer

	Private _CollectionNM As String

	Private _CollectionDS As String

	Private _ModifiedID As Integer

	Private _ModifiedDT As Date

	Private _CollectionItems As EntitySet(Of CollectionItem)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCollectionIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnCollectionIDChanged()
	End Sub
	Partial Private Sub OnCollectionNMChanging(value As String)
	End Sub
	Partial Private Sub OnCollectionNMChanged()
	End Sub
	Partial Private Sub OnCollectionDSChanging(value As String)
	End Sub
	Partial Private Sub OnCollectionDSChanged()
	End Sub
	Partial Private Sub OnModifiedIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnModifiedIDChanged()
	End Sub
	Partial Private Sub OnModifiedDTChanging(value As Date)
	End Sub
	Partial Private Sub OnModifiedDTChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._CollectionItems = New EntitySet(Of CollectionItem)(AddressOf Me.attach_CollectionItems, AddressOf Me.detach_CollectionItems)
		OnCreated
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
	Public Property CollectionID() As Integer
		Get
			Return Me._CollectionID
		End Get
		Set
			If ((Me._CollectionID = value) _
						= False) Then
				Me.OnCollectionIDChanging(value)
				Me.SendPropertyChanging
				Me._CollectionID = value
				Me.SendPropertyChanged("CollectionID")
				Me.OnCollectionIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=False)>
	Public Property CollectionNM() As String
		Get
			Return Me._CollectionNM
		End Get
		Set
			If (String.Equals(Me._CollectionNM, value) = False) Then
				Me.OnCollectionNMChanging(value)
				Me.SendPropertyChanging
				Me._CollectionNM = value
				Me.SendPropertyChanged("CollectionNM")
				Me.OnCollectionNMChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionDS", DbType:="NVarChar(MAX)")>
	Public Property CollectionDS() As String
		Get
			Return Me._CollectionDS
		End Get
		Set
			If (String.Equals(Me._CollectionDS, value) = False) Then
				Me.OnCollectionDSChanging(value)
				Me.SendPropertyChanging
				Me._CollectionDS = value
				Me.SendPropertyChanged("CollectionDS")
				Me.OnCollectionDSChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value) _
						= False) Then
				Me.OnModifiedIDChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedID = value
				Me.SendPropertyChanged("ModifiedID")
				Me.OnModifiedIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value) _
						= False) Then
				Me.OnModifiedDTChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDT = value
				Me.SendPropertyChanged("ModifiedDT")
				Me.OnModifiedDTChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Collection_CollectionItem", Storage:="_CollectionItems", ThisKey:="CollectionID", OtherKey:="CollectionID")>
	Public Property CollectionItems() As EntitySet(Of CollectionItem)
		Get
			Return Me._CollectionItems
		End Get
		Set
			Me._CollectionItems.Assign(value)
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_CollectionItems(ByVal entity As CollectionItem)
		Me.SendPropertyChanging
		entity.Collection = Me
	End Sub

	Private Sub detach_CollectionItems(ByVal entity As CollectionItem)
		Me.SendPropertyChanging
		entity.Collection = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Mineral")>
Partial Public Class Mineral
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _MineralID As Integer

	Private _MineralNM As String

	Private _MineralDS As String

	Private _WikipediaURL As String

	Private _ModifiedID As Integer

	Private _ModifiedDT As Date

	Private _CollectionItems As EntitySet(Of CollectionItem)

	Private _CollectionItemMinerals As EntitySet(Of CollectionItemMineral)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnMineralIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnMineralIDChanged()
	End Sub
	Partial Private Sub OnMineralNMChanging(value As String)
	End Sub
	Partial Private Sub OnMineralNMChanged()
	End Sub
	Partial Private Sub OnMineralDSChanging(value As String)
	End Sub
	Partial Private Sub OnMineralDSChanged()
	End Sub
	Partial Private Sub OnWikipediaURLChanging(value As String)
	End Sub
	Partial Private Sub OnWikipediaURLChanged()
	End Sub
	Partial Private Sub OnModifiedIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnModifiedIDChanged()
	End Sub
	Partial Private Sub OnModifiedDTChanging(value As Date)
	End Sub
	Partial Private Sub OnModifiedDTChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._CollectionItems = New EntitySet(Of CollectionItem)(AddressOf Me.attach_CollectionItems, AddressOf Me.detach_CollectionItems)
		Me._CollectionItemMinerals = New EntitySet(Of CollectionItemMineral)(AddressOf Me.attach_CollectionItemMinerals, AddressOf Me.detach_CollectionItemMinerals)
		OnCreated
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
	Public Property MineralID() As Integer
		Get
			Return Me._MineralID
		End Get
		Set
			If ((Me._MineralID = value) _
						= False) Then
				Me.OnMineralIDChanging(value)
				Me.SendPropertyChanging
				Me._MineralID = value
				Me.SendPropertyChanged("MineralID")
				Me.OnMineralIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=False)>
	Public Property MineralNM() As String
		Get
			Return Me._MineralNM
		End Get
		Set
			If (String.Equals(Me._MineralNM, value) = False) Then
				Me.OnMineralNMChanging(value)
				Me.SendPropertyChanging
				Me._MineralNM = value
				Me.SendPropertyChanged("MineralNM")
				Me.OnMineralNMChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralDS", DbType:="NVarChar(MAX)")>
	Public Property MineralDS() As String
		Get
			Return Me._MineralDS
		End Get
		Set
			If (String.Equals(Me._MineralDS, value) = False) Then
				Me.OnMineralDSChanging(value)
				Me.SendPropertyChanging
				Me._MineralDS = value
				Me.SendPropertyChanged("MineralDS")
				Me.OnMineralDSChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WikipediaURL", DbType:="NVarChar(255)")>
	Public Property WikipediaURL() As String
		Get
			Return Me._WikipediaURL
		End Get
		Set
			If (String.Equals(Me._WikipediaURL, value) = False) Then
				Me.OnWikipediaURLChanging(value)
				Me.SendPropertyChanging
				Me._WikipediaURL = value
				Me.SendPropertyChanged("WikipediaURL")
				Me.OnWikipediaURLChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value) _
						= False) Then
				Me.OnModifiedIDChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedID = value
				Me.SendPropertyChanged("ModifiedID")
				Me.OnModifiedIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value) _
						= False) Then
				Me.OnModifiedDTChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDT = value
				Me.SendPropertyChanged("ModifiedDT")
				Me.OnModifiedDTChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Mineral_CollectionItem", Storage:="_CollectionItems", ThisKey:="MineralID", OtherKey:="PrimaryMineralID")>
	Public Property CollectionItems() As EntitySet(Of CollectionItem)
		Get
			Return Me._CollectionItems
		End Get
		Set
			Me._CollectionItems.Assign(value)
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Mineral_CollectionItemMineral", Storage:="_CollectionItemMinerals", ThisKey:="MineralID", OtherKey:="MineralID")>
	Public Property CollectionItemMinerals() As EntitySet(Of CollectionItemMineral)
		Get
			Return Me._CollectionItemMinerals
		End Get
		Set
			Me._CollectionItemMinerals.Assign(value)
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_CollectionItems(ByVal entity As CollectionItem)
		Me.SendPropertyChanging
		entity.Mineral = Me
	End Sub

	Private Sub detach_CollectionItems(ByVal entity As CollectionItem)
		Me.SendPropertyChanging
		entity.Mineral = Nothing
	End Sub

	Private Sub attach_CollectionItemMinerals(ByVal entity As CollectionItemMineral)
		Me.SendPropertyChanging
		entity.Mineral = Me
	End Sub

	Private Sub detach_CollectionItemMinerals(ByVal entity As CollectionItemMineral)
		Me.SendPropertyChanging
		entity.Mineral = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CollectionItem")>
Partial Public Class CollectionItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _CollectionItemID As Integer

	Private _CollectionID As Integer

	Private _SpecimenNumber As Double

	Private _Nickname As String

	Private _PrimaryMineralID As System.Nullable(Of Integer)

	Private _MineralVariety As String

	Private _MineNM As String

	Private _PurchaseDate As System.Nullable(Of Date)

	Private _PurchasePrice As System.Nullable(Of Decimal)

	Private _Value As System.Nullable(Of Decimal)

	Private _ShowWherePurchased As String

	Private _PurchasedFromCompanyID As System.Nullable(Of Integer)

	Private _StorageLocation As String

	Private _SpecimenNotes As String

	Private _Description As String

	Private _ExCollection As String

	Private _HeightCm As System.Nullable(Of Double)

	Private _WidthCm As System.Nullable(Of Double)

	Private _ThicknessCm As System.Nullable(Of Double)

	Private _HeightIn As System.Nullable(Of Double)

	Private _WidthIn As System.Nullable(Of Double)

	Private _ThicknessIn As System.Nullable(Of Double)

	Private _WeightGr As String

	Private _WeightKg As String

	Private _SaleDT As System.Nullable(Of Date)

	Private _SalePrice As System.Nullable(Of Decimal)

	Private _LocationCityID As System.Nullable(Of Integer)

	Private _LocationStateID As System.Nullable(Of Integer)

	Private _LocationCountryID As System.Nullable(Of Integer)

	Private _ModifiedID As Integer

	Private _ModifiedDT As Date

	Private _IsFeatured As Integer

	Private _IsSold As Integer

	Private _CollectionItemImages As EntitySet(Of CollectionItemImage)

	Private _CollectionItemMinerals As EntitySet(Of CollectionItemMineral)

	Private _Collection As EntityRef(Of Collection)

	Private _Mineral As EntityRef(Of Mineral)

	Private _Company As EntityRef(Of Company)

	Private _LocationCity As EntityRef(Of LocationCity)

	Private _LocationCountry As EntityRef(Of LocationCountry)

	Private _LocationState As EntityRef(Of LocationState)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCollectionItemIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnCollectionItemIDChanged()
	End Sub
	Partial Private Sub OnCollectionIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnCollectionIDChanged()
	End Sub
	Partial Private Sub OnSpecimenNumberChanging(value As Double)
	End Sub
	Partial Private Sub OnSpecimenNumberChanged()
	End Sub
	Partial Private Sub OnNicknameChanging(value As String)
	End Sub
	Partial Private Sub OnNicknameChanged()
	End Sub
	Partial Private Sub OnPrimaryMineralIDChanging(value As System.Nullable(Of Integer))
	End Sub
	Partial Private Sub OnPrimaryMineralIDChanged()
	End Sub
	Partial Private Sub OnMineralVarietyChanging(value As String)
	End Sub
	Partial Private Sub OnMineralVarietyChanged()
	End Sub
	Partial Private Sub OnMineNMChanging(value As String)
	End Sub
	Partial Private Sub OnMineNMChanged()
	End Sub
	Partial Private Sub OnPurchaseDateChanging(value As System.Nullable(Of Date))
	End Sub
	Partial Private Sub OnPurchaseDateChanged()
	End Sub
	Partial Private Sub OnPurchasePriceChanging(value As System.Nullable(Of Decimal))
	End Sub
	Partial Private Sub OnPurchasePriceChanged()
	End Sub
	Partial Private Sub OnValueChanging(value As System.Nullable(Of Decimal))
	End Sub
	Partial Private Sub OnValueChanged()
	End Sub
	Partial Private Sub OnShowWherePurchasedChanging(value As String)
	End Sub
	Partial Private Sub OnShowWherePurchasedChanged()
	End Sub
	Partial Private Sub OnPurchasedFromCompanyIDChanging(value As System.Nullable(Of Integer))
	End Sub
	Partial Private Sub OnPurchasedFromCompanyIDChanged()
	End Sub
	Partial Private Sub OnStorageLocationChanging(value As String)
	End Sub
	Partial Private Sub OnStorageLocationChanged()
	End Sub
	Partial Private Sub OnSpecimenNotesChanging(value As String)
	End Sub
	Partial Private Sub OnSpecimenNotesChanged()
	End Sub
	Partial Private Sub OnDescriptionChanging(value As String)
	End Sub
	Partial Private Sub OnDescriptionChanged()
	End Sub
	Partial Private Sub OnExCollectionChanging(value As String)
	End Sub
	Partial Private Sub OnExCollectionChanged()
	End Sub
	Partial Private Sub OnHeightCmChanging(value As System.Nullable(Of Double))
	End Sub
	Partial Private Sub OnHeightCmChanged()
	End Sub
	Partial Private Sub OnWidthCmChanging(value As System.Nullable(Of Double))
	End Sub
	Partial Private Sub OnWidthCmChanged()
	End Sub
	Partial Private Sub OnThicknessCmChanging(value As System.Nullable(Of Double))
	End Sub
	Partial Private Sub OnThicknessCmChanged()
	End Sub
	Partial Private Sub OnHeightInChanging(value As System.Nullable(Of Double))
	End Sub
	Partial Private Sub OnHeightInChanged()
	End Sub
	Partial Private Sub OnWidthInChanging(value As System.Nullable(Of Double))
	End Sub
	Partial Private Sub OnWidthInChanged()
	End Sub
	Partial Private Sub OnThicknessInChanging(value As System.Nullable(Of Double))
	End Sub
	Partial Private Sub OnThicknessInChanged()
	End Sub
	Partial Private Sub OnWeightGrChanging(value As String)
	End Sub
	Partial Private Sub OnWeightGrChanged()
	End Sub
	Partial Private Sub OnWeightKgChanging(value As String)
	End Sub
	Partial Private Sub OnWeightKgChanged()
	End Sub
	Partial Private Sub OnSaleDTChanging(value As System.Nullable(Of Date))
	End Sub
	Partial Private Sub OnSaleDTChanged()
	End Sub
	Partial Private Sub OnSalePriceChanging(value As System.Nullable(Of Decimal))
	End Sub
	Partial Private Sub OnSalePriceChanged()
	End Sub
	Partial Private Sub OnLocationCityIDChanging(value As System.Nullable(Of Integer))
	End Sub
	Partial Private Sub OnLocationCityIDChanged()
	End Sub
	Partial Private Sub OnLocationStateIDChanging(value As System.Nullable(Of Integer))
	End Sub
	Partial Private Sub OnLocationStateIDChanged()
	End Sub
	Partial Private Sub OnLocationCountryIDChanging(value As System.Nullable(Of Integer))
	End Sub
	Partial Private Sub OnLocationCountryIDChanged()
	End Sub
	Partial Private Sub OnModifiedIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnModifiedIDChanged()
	End Sub
	Partial Private Sub OnModifiedDTChanging(value As Date)
	End Sub
	Partial Private Sub OnModifiedDTChanged()
	End Sub
	Partial Private Sub OnIsFeaturedChanging(value As Integer)
	End Sub
	Partial Private Sub OnIsFeaturedChanged()
	End Sub
	Partial Private Sub OnIsSoldChanging(value As Integer)
	End Sub
	Partial Private Sub OnIsSoldChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._CollectionItemImages = New EntitySet(Of CollectionItemImage)(AddressOf Me.attach_CollectionItemImages, AddressOf Me.detach_CollectionItemImages)
		Me._CollectionItemMinerals = New EntitySet(Of CollectionItemMineral)(AddressOf Me.attach_CollectionItemMinerals, AddressOf Me.detach_CollectionItemMinerals)
		Me._Collection = CType(Nothing, EntityRef(Of Collection))
		Me._Mineral = CType(Nothing, EntityRef(Of Mineral))
		Me._Company = CType(Nothing, EntityRef(Of Company))
		Me._LocationCity = CType(Nothing, EntityRef(Of LocationCity))
		Me._LocationCountry = CType(Nothing, EntityRef(Of LocationCountry))
		Me._LocationState = CType(Nothing, EntityRef(Of LocationState))
		OnCreated
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value) _
						= False) Then
				Me.OnCollectionItemIDChanging(value)
				Me.SendPropertyChanging
				Me._CollectionItemID = value
				Me.SendPropertyChanged("CollectionItemID")
				Me.OnCollectionItemIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionID", DbType:="Int NOT NULL")>
	Public Property CollectionID() As Integer
		Get
			Return Me._CollectionID
		End Get
		Set
			If ((Me._CollectionID = value) _
						= False) Then
				If Me._Collection.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCollectionIDChanging(value)
				Me.SendPropertyChanging
				Me._CollectionID = value
				Me.SendPropertyChanged("CollectionID")
				Me.OnCollectionIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNumber", DbType:="Float NOT NULL")>
	Public Property SpecimenNumber() As Double
		Get
			Return Me._SpecimenNumber
		End Get
		Set
			If ((Me._SpecimenNumber = value) _
						= False) Then
				Me.OnSpecimenNumberChanging(value)
				Me.SendPropertyChanging
				Me._SpecimenNumber = value
				Me.SendPropertyChanged("SpecimenNumber")
				Me.OnSpecimenNumberChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nickname", DbType:="NVarChar(255)")>
	Public Property Nickname() As String
		Get
			Return Me._Nickname
		End Get
		Set
			If (String.Equals(Me._Nickname, value) = False) Then
				Me.OnNicknameChanging(value)
				Me.SendPropertyChanging
				Me._Nickname = value
				Me.SendPropertyChanged("Nickname")
				Me.OnNicknameChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryMineralID", DbType:="Int")>
	Public Property PrimaryMineralID() As System.Nullable(Of Integer)
		Get
			Return Me._PrimaryMineralID
		End Get
		Set
			If (Me._PrimaryMineralID.Equals(value) = False) Then
				If Me._Mineral.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPrimaryMineralIDChanging(value)
				Me.SendPropertyChanging
				Me._PrimaryMineralID = value
				Me.SendPropertyChanged("PrimaryMineralID")
				Me.OnPrimaryMineralIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralVariety", DbType:="NVarChar(255)")>
	Public Property MineralVariety() As String
		Get
			Return Me._MineralVariety
		End Get
		Set
			If (String.Equals(Me._MineralVariety, value) = False) Then
				Me.OnMineralVarietyChanging(value)
				Me.SendPropertyChanging
				Me._MineralVariety = value
				Me.SendPropertyChanged("MineralVariety")
				Me.OnMineralVarietyChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineNM", DbType:="NVarChar(255)")>
	Public Property MineNM() As String
		Get
			Return Me._MineNM
		End Get
		Set
			If (String.Equals(Me._MineNM, value) = False) Then
				Me.OnMineNMChanging(value)
				Me.SendPropertyChanging
				Me._MineNM = value
				Me.SendPropertyChanged("MineNM")
				Me.OnMineNMChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseDate", DbType:="DateTime")>
	Public Property PurchaseDate() As System.Nullable(Of Date)
		Get
			Return Me._PurchaseDate
		End Get
		Set
			If (Me._PurchaseDate.Equals(value) = False) Then
				Me.OnPurchaseDateChanging(value)
				Me.SendPropertyChanging
				Me._PurchaseDate = value
				Me.SendPropertyChanged("PurchaseDate")
				Me.OnPurchaseDateChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchasePrice", DbType:="Money")>
	Public Property PurchasePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._PurchasePrice
		End Get
		Set
			If (Me._PurchasePrice.Equals(value) = False) Then
				Me.OnPurchasePriceChanging(value)
				Me.SendPropertyChanging
				Me._PurchasePrice = value
				Me.SendPropertyChanged("PurchasePrice")
				Me.OnPurchasePriceChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Money")>
	Public Property Value() As System.Nullable(Of Decimal)
		Get
			Return Me._Value
		End Get
		Set
			If (Me._Value.Equals(value) = False) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowWherePurchased", DbType:="NVarChar(255)")>
	Public Property ShowWherePurchased() As String
		Get
			Return Me._ShowWherePurchased
		End Get
		Set
			If (String.Equals(Me._ShowWherePurchased, value) = False) Then
				Me.OnShowWherePurchasedChanging(value)
				Me.SendPropertyChanging
				Me._ShowWherePurchased = value
				Me.SendPropertyChanged("ShowWherePurchased")
				Me.OnShowWherePurchasedChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchasedFromCompanyID", DbType:="Int")>
	Public Property PurchasedFromCompanyID() As System.Nullable(Of Integer)
		Get
			Return Me._PurchasedFromCompanyID
		End Get
		Set
			If (Me._PurchasedFromCompanyID.Equals(value) = False) Then
				If Me._Company.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPurchasedFromCompanyIDChanging(value)
				Me.SendPropertyChanging
				Me._PurchasedFromCompanyID = value
				Me.SendPropertyChanged("PurchasedFromCompanyID")
				Me.OnPurchasedFromCompanyIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StorageLocation", DbType:="NVarChar(255)")>
	Public Property StorageLocation() As String
		Get
			Return Me._StorageLocation
		End Get
		Set
			If (String.Equals(Me._StorageLocation, value) = False) Then
				Me.OnStorageLocationChanging(value)
				Me.SendPropertyChanging
				Me._StorageLocation = value
				Me.SendPropertyChanged("StorageLocation")
				Me.OnStorageLocationChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNotes", DbType:="NVarChar(MAX)")>
	Public Property SpecimenNotes() As String
		Get
			Return Me._SpecimenNotes
		End Get
		Set
			If (String.Equals(Me._SpecimenNotes, value) = False) Then
				Me.OnSpecimenNotesChanging(value)
				Me.SendPropertyChanging
				Me._SpecimenNotes = value
				Me.SendPropertyChanged("SpecimenNotes")
				Me.OnSpecimenNotesChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = False) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExCollection", DbType:="NVarChar(255)")>
	Public Property ExCollection() As String
		Get
			Return Me._ExCollection
		End Get
		Set
			If (String.Equals(Me._ExCollection, value) = False) Then
				Me.OnExCollectionChanging(value)
				Me.SendPropertyChanging
				Me._ExCollection = value
				Me.SendPropertyChanged("ExCollection")
				Me.OnExCollectionChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeightCm", DbType:="Float")>
	Public Property HeightCm() As System.Nullable(Of Double)
		Get
			Return Me._HeightCm
		End Get
		Set
			If (Me._HeightCm.Equals(value) = False) Then
				Me.OnHeightCmChanging(value)
				Me.SendPropertyChanging
				Me._HeightCm = value
				Me.SendPropertyChanged("HeightCm")
				Me.OnHeightCmChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidthCm", DbType:="Float")>
	Public Property WidthCm() As System.Nullable(Of Double)
		Get
			Return Me._WidthCm
		End Get
		Set
			If (Me._WidthCm.Equals(value) = False) Then
				Me.OnWidthCmChanging(value)
				Me.SendPropertyChanging
				Me._WidthCm = value
				Me.SendPropertyChanged("WidthCm")
				Me.OnWidthCmChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThicknessCm", DbType:="Float")>
	Public Property ThicknessCm() As System.Nullable(Of Double)
		Get
			Return Me._ThicknessCm
		End Get
		Set
			If (Me._ThicknessCm.Equals(value) = False) Then
				Me.OnThicknessCmChanging(value)
				Me.SendPropertyChanging
				Me._ThicknessCm = value
				Me.SendPropertyChanged("ThicknessCm")
				Me.OnThicknessCmChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeightIn", DbType:="Float")>
	Public Property HeightIn() As System.Nullable(Of Double)
		Get
			Return Me._HeightIn
		End Get
		Set
			If (Me._HeightIn.Equals(value) = False) Then
				Me.OnHeightInChanging(value)
				Me.SendPropertyChanging
				Me._HeightIn = value
				Me.SendPropertyChanged("HeightIn")
				Me.OnHeightInChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidthIn", DbType:="Float")>
	Public Property WidthIn() As System.Nullable(Of Double)
		Get
			Return Me._WidthIn
		End Get
		Set
			If (Me._WidthIn.Equals(value) = False) Then
				Me.OnWidthInChanging(value)
				Me.SendPropertyChanging
				Me._WidthIn = value
				Me.SendPropertyChanged("WidthIn")
				Me.OnWidthInChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThicknessIn", DbType:="Float")>
	Public Property ThicknessIn() As System.Nullable(Of Double)
		Get
			Return Me._ThicknessIn
		End Get
		Set
			If (Me._ThicknessIn.Equals(value) = False) Then
				Me.OnThicknessInChanging(value)
				Me.SendPropertyChanging
				Me._ThicknessIn = value
				Me.SendPropertyChanged("ThicknessIn")
				Me.OnThicknessInChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightGr", DbType:="NVarChar(255)")>
	Public Property WeightGr() As String
		Get
			Return Me._WeightGr
		End Get
		Set
			If (String.Equals(Me._WeightGr, value) = False) Then
				Me.OnWeightGrChanging(value)
				Me.SendPropertyChanging
				Me._WeightGr = value
				Me.SendPropertyChanged("WeightGr")
				Me.OnWeightGrChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightKg", DbType:="NVarChar(255)")>
	Public Property WeightKg() As String
		Get
			Return Me._WeightKg
		End Get
		Set
			If (String.Equals(Me._WeightKg, value) = False) Then
				Me.OnWeightKgChanging(value)
				Me.SendPropertyChanging
				Me._WeightKg = value
				Me.SendPropertyChanged("WeightKg")
				Me.OnWeightKgChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaleDT", DbType:="DateTime")>
	Public Property SaleDT() As System.Nullable(Of Date)
		Get
			Return Me._SaleDT
		End Get
		Set
			If (Me._SaleDT.Equals(value) = False) Then
				Me.OnSaleDTChanging(value)
				Me.SendPropertyChanging
				Me._SaleDT = value
				Me.SendPropertyChanged("SaleDT")
				Me.OnSaleDTChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalePrice", DbType:="Money")>
	Public Property SalePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._SalePrice
		End Get
		Set
			If (Me._SalePrice.Equals(value) = False) Then
				Me.OnSalePriceChanging(value)
				Me.SendPropertyChanging
				Me._SalePrice = value
				Me.SendPropertyChanged("SalePrice")
				Me.OnSalePriceChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCityID", DbType:="Int")>
	Public Property LocationCityID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCityID
		End Get
		Set
			If (Me._LocationCityID.Equals(value) = False) Then
				If Me._LocationCity.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLocationCityIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationCityID = value
				Me.SendPropertyChanged("LocationCityID")
				Me.OnLocationCityIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationStateID", DbType:="Int")>
	Public Property LocationStateID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationStateID
		End Get
		Set
			If (Me._LocationStateID.Equals(value) = False) Then
				If Me._LocationState.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLocationStateIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationStateID = value
				Me.SendPropertyChanged("LocationStateID")
				Me.OnLocationStateIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", DbType:="Int")>
	Public Property LocationCountryID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If (Me._LocationCountryID.Equals(value) = False) Then
				If Me._LocationCountry.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLocationCountryIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationCountryID = value
				Me.SendPropertyChanged("LocationCountryID")
				Me.OnLocationCountryIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value) _
						= False) Then
				Me.OnModifiedIDChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedID = value
				Me.SendPropertyChanged("ModifiedID")
				Me.OnModifiedIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value) _
						= False) Then
				Me.OnModifiedDTChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDT = value
				Me.SendPropertyChanged("ModifiedDT")
				Me.OnModifiedDTChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsFeatured", DbType:="Int NOT NULL")>
	Public Property IsFeatured() As Integer
		Get
			Return Me._IsFeatured
		End Get
		Set
			If ((Me._IsFeatured = value) _
						= False) Then
				Me.OnIsFeaturedChanging(value)
				Me.SendPropertyChanging
				Me._IsFeatured = value
				Me.SendPropertyChanged("IsFeatured")
				Me.OnIsFeaturedChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsSold", DbType:="Int NOT NULL")>
	Public Property IsSold() As Integer
		Get
			Return Me._IsSold
		End Get
		Set
			If ((Me._IsSold = value) _
						= False) Then
				Me.OnIsSoldChanging(value)
				Me.SendPropertyChanging
				Me._IsSold = value
				Me.SendPropertyChanged("IsSold")
				Me.OnIsSoldChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CollectionItem_CollectionItemImage", Storage:="_CollectionItemImages", ThisKey:="CollectionItemID", OtherKey:="CollectionItemID")>
	Public Property CollectionItemImages() As EntitySet(Of CollectionItemImage)
		Get
			Return Me._CollectionItemImages
		End Get
		Set
			Me._CollectionItemImages.Assign(value)
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CollectionItem_CollectionItemMineral", Storage:="_CollectionItemMinerals", ThisKey:="CollectionItemID", OtherKey:="CollectionItemID")>
	Public Property CollectionItemMinerals() As EntitySet(Of CollectionItemMineral)
		Get
			Return Me._CollectionItemMinerals
		End Get
		Set
			Me._CollectionItemMinerals.Assign(value)
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Collection_CollectionItem", Storage:="_Collection", ThisKey:="CollectionID", OtherKey:="CollectionID", IsForeignKey:=True)>
	Public Property Collection() As Collection
		Get
			Return Me._Collection.Entity
		End Get
		Set
			Dim previousValue As Collection = Me._Collection.Entity
			If ((Object.Equals(previousValue, value) = False) _
						OrElse (Me._Collection.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing) _
							= False) Then
					Me._Collection.Entity = Nothing
					previousValue.CollectionItems.Remove(Me)
				End If
				Me._Collection.Entity = value
				If ((value Is Nothing) _
							= False) Then
					value.CollectionItems.Add(Me)
					Me._CollectionID = value.CollectionID
				Else
					Me._CollectionID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Collection")
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Mineral_CollectionItem", Storage:="_Mineral", ThisKey:="PrimaryMineralID", OtherKey:="MineralID", IsForeignKey:=True)>
	Public Property Mineral() As Mineral
		Get
			Return Me._Mineral.Entity
		End Get
		Set
			Dim previousValue As Mineral = Me._Mineral.Entity
			If ((Object.Equals(previousValue, value) = False) _
						OrElse (Me._Mineral.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing) _
							= False) Then
					Me._Mineral.Entity = Nothing
					previousValue.CollectionItems.Remove(Me)
				End If
				Me._Mineral.Entity = value
				If ((value Is Nothing) _
							= False) Then
					value.CollectionItems.Add(Me)
					Me._PrimaryMineralID = value.MineralID
				Else
					Me._PrimaryMineralID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Mineral")
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Company_CollectionItem", Storage:="_Company", ThisKey:="PurchasedFromCompanyID", OtherKey:="CompanyID", IsForeignKey:=True)>
	Public Property Company() As Company
		Get
			Return Me._Company.Entity
		End Get
		Set
			Dim previousValue As Company = Me._Company.Entity
			If ((Object.Equals(previousValue, value) = False) _
						OrElse (Me._Company.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing) _
							= False) Then
					Me._Company.Entity = Nothing
					previousValue.CollectionItems.Remove(Me)
				End If
				Me._Company.Entity = value
				If ((value Is Nothing) _
							= False) Then
					value.CollectionItems.Add(Me)
					Me._PurchasedFromCompanyID = value.CompanyID
				Else
					Me._PurchasedFromCompanyID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Company")
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LocationCity_CollectionItem", Storage:="_LocationCity", ThisKey:="LocationCityID", OtherKey:="LocationCityID", IsForeignKey:=True)>
	Public Property LocationCity() As LocationCity
		Get
			Return Me._LocationCity.Entity
		End Get
		Set
			Dim previousValue As LocationCity = Me._LocationCity.Entity
			If ((Object.Equals(previousValue, value) = False) _
						OrElse (Me._LocationCity.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing) _
							= False) Then
					Me._LocationCity.Entity = Nothing
					previousValue.CollectionItems.Remove(Me)
				End If
				Me._LocationCity.Entity = value
				If ((value Is Nothing) _
							= False) Then
					value.CollectionItems.Add(Me)
					Me._LocationCityID = value.LocationCityID
				Else
					Me._LocationCityID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("LocationCity")
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LocationCountry_CollectionItem", Storage:="_LocationCountry", ThisKey:="LocationCountryID", OtherKey:="LocationCountryID", IsForeignKey:=True)>
	Public Property LocationCountry() As LocationCountry
		Get
			Return Me._LocationCountry.Entity
		End Get
		Set
			Dim previousValue As LocationCountry = Me._LocationCountry.Entity
			If ((Object.Equals(previousValue, value) = False) _
						OrElse (Me._LocationCountry.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing) _
							= False) Then
					Me._LocationCountry.Entity = Nothing
					previousValue.CollectionItems.Remove(Me)
				End If
				Me._LocationCountry.Entity = value
				If ((value Is Nothing) _
							= False) Then
					value.CollectionItems.Add(Me)
					Me._LocationCountryID = value.LocationCountryID
				Else
					Me._LocationCountryID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("LocationCountry")
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LocationState_CollectionItem", Storage:="_LocationState", ThisKey:="LocationStateID", OtherKey:="LocationStateID", IsForeignKey:=True)>
	Public Property LocationState() As LocationState
		Get
			Return Me._LocationState.Entity
		End Get
		Set
			Dim previousValue As LocationState = Me._LocationState.Entity
			If ((Object.Equals(previousValue, value) = False) _
						OrElse (Me._LocationState.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing) _
							= False) Then
					Me._LocationState.Entity = Nothing
					previousValue.CollectionItems.Remove(Me)
				End If
				Me._LocationState.Entity = value
				If ((value Is Nothing) _
							= False) Then
					value.CollectionItems.Add(Me)
					Me._LocationStateID = value.LocationStateID
				Else
					Me._LocationStateID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("LocationState")
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_CollectionItemImages(ByVal entity As CollectionItemImage)
		Me.SendPropertyChanging
		entity.CollectionItem = Me
	End Sub

	Private Sub detach_CollectionItemImages(ByVal entity As CollectionItemImage)
		Me.SendPropertyChanging
		entity.CollectionItem = Nothing
	End Sub

	Private Sub attach_CollectionItemMinerals(ByVal entity As CollectionItemMineral)
		Me.SendPropertyChanging
		entity.CollectionItem = Me
	End Sub

	Private Sub detach_CollectionItemMinerals(ByVal entity As CollectionItemMineral)
		Me.SendPropertyChanging
		entity.CollectionItem = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CollectionItemImage")>
Partial Public Class CollectionItemImage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _CollectionItemImageID As Integer

	Private _CollectionItemID As Integer

	Private _ImageType As String

	Private _DisplayOrder As Integer

	Private _ImageNM As String

	Private _ImageDS As String

	Private _ImageFileNM As String

	Private _ModifiedID As Integer

	Private _ModifiedDT As Date

	Private _CollectionItem As EntityRef(Of CollectionItem)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCollectionItemImageIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnCollectionItemImageIDChanged()
	End Sub
	Partial Private Sub OnCollectionItemIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnCollectionItemIDChanged()
	End Sub
	Partial Private Sub OnImageTypeChanging(value As String)
	End Sub
	Partial Private Sub OnImageTypeChanged()
	End Sub
	Partial Private Sub OnDisplayOrderChanging(value As Integer)
	End Sub
	Partial Private Sub OnDisplayOrderChanged()
	End Sub
	Partial Private Sub OnImageNMChanging(value As String)
	End Sub
	Partial Private Sub OnImageNMChanged()
	End Sub
	Partial Private Sub OnImageDSChanging(value As String)
	End Sub
	Partial Private Sub OnImageDSChanged()
	End Sub
	Partial Private Sub OnImageFileNMChanging(value As String)
	End Sub
	Partial Private Sub OnImageFileNMChanged()
	End Sub
	Partial Private Sub OnModifiedIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnModifiedIDChanged()
	End Sub
	Partial Private Sub OnModifiedDTChanging(value As Date)
	End Sub
	Partial Private Sub OnModifiedDTChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._CollectionItem = CType(Nothing, EntityRef(Of CollectionItem))
		OnCreated
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemImageID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
	Public Property CollectionItemImageID() As Integer
		Get
			Return Me._CollectionItemImageID
		End Get
		Set
			If ((Me._CollectionItemImageID = value) _
						= False) Then
				Me.OnCollectionItemImageIDChanging(value)
				Me.SendPropertyChanging
				Me._CollectionItemImageID = value
				Me.SendPropertyChanged("CollectionItemImageID")
				Me.OnCollectionItemImageIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value) _
						= False) Then
				If Me._CollectionItem.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCollectionItemIDChanging(value)
				Me.SendPropertyChanging
				Me._CollectionItemID = value
				Me.SendPropertyChanged("CollectionItemID")
				Me.OnCollectionItemIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageType", DbType:="NVarChar(255) NOT NULL", CanBeNull:=False)>
	Public Property ImageType() As String
		Get
			Return Me._ImageType
		End Get
		Set
			If (String.Equals(Me._ImageType, value) = False) Then
				Me.OnImageTypeChanging(value)
				Me.SendPropertyChanging
				Me._ImageType = value
				Me.SendPropertyChanged("ImageType")
				Me.OnImageTypeChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayOrder", DbType:="Int NOT NULL")>
	Public Property DisplayOrder() As Integer
		Get
			Return Me._DisplayOrder
		End Get
		Set
			If ((Me._DisplayOrder = value) _
						= False) Then
				Me.OnDisplayOrderChanging(value)
				Me.SendPropertyChanging
				Me._DisplayOrder = value
				Me.SendPropertyChanged("DisplayOrder")
				Me.OnDisplayOrderChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=False)>
	Public Property ImageNM() As String
		Get
			Return Me._ImageNM
		End Get
		Set
			If (String.Equals(Me._ImageNM, value) = False) Then
				Me.OnImageNMChanging(value)
				Me.SendPropertyChanging
				Me._ImageNM = value
				Me.SendPropertyChanged("ImageNM")
				Me.OnImageNMChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageDS", DbType:="NVarChar(MAX)")>
	Public Property ImageDS() As String
		Get
			Return Me._ImageDS
		End Get
		Set
			If (String.Equals(Me._ImageDS, value) = False) Then
				Me.OnImageDSChanging(value)
				Me.SendPropertyChanging
				Me._ImageDS = value
				Me.SendPropertyChanged("ImageDS")
				Me.OnImageDSChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageFileNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=False)>
	Public Property ImageFileNM() As String
		Get
			Return Me._ImageFileNM
		End Get
		Set
			If (String.Equals(Me._ImageFileNM, value) = False) Then
				Me.OnImageFileNMChanging(value)
				Me.SendPropertyChanging
				Me._ImageFileNM = value
				Me.SendPropertyChanged("ImageFileNM")
				Me.OnImageFileNMChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value) _
						= False) Then
				Me.OnModifiedIDChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedID = value
				Me.SendPropertyChanged("ModifiedID")
				Me.OnModifiedIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value) _
						= False) Then
				Me.OnModifiedDTChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDT = value
				Me.SendPropertyChanged("ModifiedDT")
				Me.OnModifiedDTChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CollectionItem_CollectionItemImage", Storage:="_CollectionItem", ThisKey:="CollectionItemID", OtherKey:="CollectionItemID", IsForeignKey:=True)>
	Public Property CollectionItem() As CollectionItem
		Get
			Return Me._CollectionItem.Entity
		End Get
		Set
			Dim previousValue As CollectionItem = Me._CollectionItem.Entity
			If ((Object.Equals(previousValue, value) = False) _
						OrElse (Me._CollectionItem.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing) _
							= False) Then
					Me._CollectionItem.Entity = Nothing
					previousValue.CollectionItemImages.Remove(Me)
				End If
				Me._CollectionItem.Entity = value
				If ((value Is Nothing) _
							= False) Then
					value.CollectionItemImages.Add(Me)
					Me._CollectionItemID = value.CollectionItemID
				Else
					Me._CollectionItemID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CollectionItem")
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CollectionItemMineral")>
Partial Public Class CollectionItemMineral
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _CollectionItemMineralID As Integer

	Private _CollectionItemID As Integer

	Private _MineralID As Integer

	Private _Position As Integer

	Private _ModifiedID As Integer

	Private _ModifiedDT As Date

	Private _CollectionItem As EntityRef(Of CollectionItem)

	Private _Mineral As EntityRef(Of Mineral)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCollectionItemMineralIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnCollectionItemMineralIDChanged()
	End Sub
	Partial Private Sub OnCollectionItemIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnCollectionItemIDChanged()
	End Sub
	Partial Private Sub OnMineralIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnMineralIDChanged()
	End Sub
	Partial Private Sub OnPositionChanging(value As Integer)
	End Sub
	Partial Private Sub OnPositionChanged()
	End Sub
	Partial Private Sub OnModifiedIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnModifiedIDChanged()
	End Sub
	Partial Private Sub OnModifiedDTChanging(value As Date)
	End Sub
	Partial Private Sub OnModifiedDTChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._CollectionItem = CType(Nothing, EntityRef(Of CollectionItem))
		Me._Mineral = CType(Nothing, EntityRef(Of Mineral))
		OnCreated
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemMineralID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
	Public Property CollectionItemMineralID() As Integer
		Get
			Return Me._CollectionItemMineralID
		End Get
		Set
			If ((Me._CollectionItemMineralID = value) _
						= False) Then
				Me.OnCollectionItemMineralIDChanging(value)
				Me.SendPropertyChanging
				Me._CollectionItemMineralID = value
				Me.SendPropertyChanged("CollectionItemMineralID")
				Me.OnCollectionItemMineralIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value) _
						= False) Then
				If Me._CollectionItem.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCollectionItemIDChanging(value)
				Me.SendPropertyChanging
				Me._CollectionItemID = value
				Me.SendPropertyChanged("CollectionItemID")
				Me.OnCollectionItemIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralID", DbType:="Int NOT NULL")>
	Public Property MineralID() As Integer
		Get
			Return Me._MineralID
		End Get
		Set
			If ((Me._MineralID = value) _
						= False) Then
				If Me._Mineral.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMineralIDChanging(value)
				Me.SendPropertyChanging
				Me._MineralID = value
				Me.SendPropertyChanged("MineralID")
				Me.OnMineralIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Position", DbType:="Int NOT NULL")>
	Public Property Position() As Integer
		Get
			Return Me._Position
		End Get
		Set
			If ((Me._Position = value) _
						= False) Then
				Me.OnPositionChanging(value)
				Me.SendPropertyChanging
				Me._Position = value
				Me.SendPropertyChanged("Position")
				Me.OnPositionChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value) _
						= False) Then
				Me.OnModifiedIDChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedID = value
				Me.SendPropertyChanged("ModifiedID")
				Me.OnModifiedIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value) _
						= False) Then
				Me.OnModifiedDTChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDT = value
				Me.SendPropertyChanged("ModifiedDT")
				Me.OnModifiedDTChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CollectionItem_CollectionItemMineral", Storage:="_CollectionItem", ThisKey:="CollectionItemID", OtherKey:="CollectionItemID", IsForeignKey:=True)>
	Public Property CollectionItem() As CollectionItem
		Get
			Return Me._CollectionItem.Entity
		End Get
		Set
			Dim previousValue As CollectionItem = Me._CollectionItem.Entity
			If ((Object.Equals(previousValue, value) = False) _
						OrElse (Me._CollectionItem.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing) _
							= False) Then
					Me._CollectionItem.Entity = Nothing
					previousValue.CollectionItemMinerals.Remove(Me)
				End If
				Me._CollectionItem.Entity = value
				If ((value Is Nothing) _
							= False) Then
					value.CollectionItemMinerals.Add(Me)
					Me._CollectionItemID = value.CollectionItemID
				Else
					Me._CollectionItemID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CollectionItem")
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Mineral_CollectionItemMineral", Storage:="_Mineral", ThisKey:="MineralID", OtherKey:="MineralID", IsForeignKey:=True)>
	Public Property Mineral() As Mineral
		Get
			Return Me._Mineral.Entity
		End Get
		Set
			Dim previousValue As Mineral = Me._Mineral.Entity
			If ((Object.Equals(previousValue, value) = False) _
						OrElse (Me._Mineral.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing) _
							= False) Then
					Me._Mineral.Entity = Nothing
					previousValue.CollectionItemMinerals.Remove(Me)
				End If
				Me._Mineral.Entity = value
				If ((value Is Nothing) _
							= False) Then
					value.CollectionItemMinerals.Add(Me)
					Me._MineralID = value.MineralID
				Else
					Me._MineralID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Mineral")
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Company")>
Partial Public Class Company
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _CompanyID As Integer

	Private _CompanyNM As String

	Private _CompanyDS As String

	Private _ModifiedID As Integer

	Private _ModifiedDT As Date

	Private _CollectionItems As EntitySet(Of CollectionItem)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCompanyIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnCompanyIDChanged()
	End Sub
	Partial Private Sub OnCompanyNMChanging(value As String)
	End Sub
	Partial Private Sub OnCompanyNMChanged()
	End Sub
	Partial Private Sub OnCompanyDSChanging(value As String)
	End Sub
	Partial Private Sub OnCompanyDSChanged()
	End Sub
	Partial Private Sub OnModifiedIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnModifiedIDChanged()
	End Sub
	Partial Private Sub OnModifiedDTChanging(value As Date)
	End Sub
	Partial Private Sub OnModifiedDTChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._CollectionItems = New EntitySet(Of CollectionItem)(AddressOf Me.attach_CollectionItems, AddressOf Me.detach_CollectionItems)
		OnCreated
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
	Public Property CompanyID() As Integer
		Get
			Return Me._CompanyID
		End Get
		Set
			If ((Me._CompanyID = value) _
						= False) Then
				Me.OnCompanyIDChanging(value)
				Me.SendPropertyChanging
				Me._CompanyID = value
				Me.SendPropertyChanged("CompanyID")
				Me.OnCompanyIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=False)>
	Public Property CompanyNM() As String
		Get
			Return Me._CompanyNM
		End Get
		Set
			If (String.Equals(Me._CompanyNM, value) = False) Then
				Me.OnCompanyNMChanging(value)
				Me.SendPropertyChanging
				Me._CompanyNM = value
				Me.SendPropertyChanged("CompanyNM")
				Me.OnCompanyNMChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyDS", DbType:="NVarChar(MAX)")>
	Public Property CompanyDS() As String
		Get
			Return Me._CompanyDS
		End Get
		Set
			If (String.Equals(Me._CompanyDS, value) = False) Then
				Me.OnCompanyDSChanging(value)
				Me.SendPropertyChanging
				Me._CompanyDS = value
				Me.SendPropertyChanged("CompanyDS")
				Me.OnCompanyDSChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value) _
						= False) Then
				Me.OnModifiedIDChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedID = value
				Me.SendPropertyChanged("ModifiedID")
				Me.OnModifiedIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value) _
						= False) Then
				Me.OnModifiedDTChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDT = value
				Me.SendPropertyChanged("ModifiedDT")
				Me.OnModifiedDTChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Company_CollectionItem", Storage:="_CollectionItems", ThisKey:="CompanyID", OtherKey:="PurchasedFromCompanyID")>
	Public Property CollectionItems() As EntitySet(Of CollectionItem)
		Get
			Return Me._CollectionItems
		End Get
		Set
			Me._CollectionItems.Assign(value)
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_CollectionItems(ByVal entity As CollectionItem)
		Me.SendPropertyChanging
		entity.Company = Me
	End Sub

	Private Sub detach_CollectionItems(ByVal entity As CollectionItem)
		Me.SendPropertyChanging
		entity.Company = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LocationCity")>
Partial Public Class LocationCity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _LocationCityID As Integer

	Private _City As String

	Private _CityDS As String

	Private _County As String

	Private _Latitude As String

	Private _Longitude As String

	Private _LocationStateID As System.Nullable(Of Integer)

	Private _LocationCountryID As System.Nullable(Of Integer)

	Private _ModifiedID As Integer

	Private _ModifiedDT As Date

	Private _CollectionItems As EntitySet(Of CollectionItem)

	Private _LocationCountry As EntityRef(Of LocationCountry)

	Private _LocationState As EntityRef(Of LocationState)

	Private _LocationState1 As EntityRef(Of LocationState)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnLocationCityIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnLocationCityIDChanged()
	End Sub
	Partial Private Sub OnCityChanging(value As String)
	End Sub
	Partial Private Sub OnCityChanged()
	End Sub
	Partial Private Sub OnCityDSChanging(value As String)
	End Sub
	Partial Private Sub OnCityDSChanged()
	End Sub
	Partial Private Sub OnCountyChanging(value As String)
	End Sub
	Partial Private Sub OnCountyChanged()
	End Sub
	Partial Private Sub OnLatitudeChanging(value As String)
	End Sub
	Partial Private Sub OnLatitudeChanged()
	End Sub
	Partial Private Sub OnLongitudeChanging(value As String)
	End Sub
	Partial Private Sub OnLongitudeChanged()
	End Sub
	Partial Private Sub OnLocationStateIDChanging(value As System.Nullable(Of Integer))
	End Sub
	Partial Private Sub OnLocationStateIDChanged()
	End Sub
	Partial Private Sub OnLocationCountryIDChanging(value As System.Nullable(Of Integer))
	End Sub
	Partial Private Sub OnLocationCountryIDChanged()
	End Sub
	Partial Private Sub OnModifiedIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnModifiedIDChanged()
	End Sub
	Partial Private Sub OnModifiedDTChanging(value As Date)
	End Sub
	Partial Private Sub OnModifiedDTChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._CollectionItems = New EntitySet(Of CollectionItem)(AddressOf Me.attach_CollectionItems, AddressOf Me.detach_CollectionItems)
		Me._LocationCountry = CType(Nothing, EntityRef(Of LocationCountry))
		Me._LocationState = CType(Nothing, EntityRef(Of LocationState))
		Me._LocationState1 = CType(Nothing, EntityRef(Of LocationState))
		OnCreated
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCityID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
	Public Property LocationCityID() As Integer
		Get
			Return Me._LocationCityID
		End Get
		Set
			If ((Me._LocationCityID = value) _
						= False) Then
				Me.OnLocationCityIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationCityID = value
				Me.SendPropertyChanged("LocationCityID")
				Me.OnLocationCityIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(255) NOT NULL", CanBeNull:=False)>
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = False) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityDS", DbType:="NVarChar(MAX)")>
	Public Property CityDS() As String
		Get
			Return Me._CityDS
		End Get
		Set
			If (String.Equals(Me._CityDS, value) = False) Then
				Me.OnCityDSChanging(value)
				Me.SendPropertyChanging
				Me._CityDS = value
				Me.SendPropertyChanged("CityDS")
				Me.OnCityDSChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_County", DbType:="NVarChar(255)")>
	Public Property County() As String
		Get
			Return Me._County
		End Get
		Set
			If (String.Equals(Me._County, value) = False) Then
				Me.OnCountyChanging(value)
				Me.SendPropertyChanging
				Me._County = value
				Me.SendPropertyChanged("County")
				Me.OnCountyChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="NChar(10)")>
	Public Property Latitude() As String
		Get
			Return Me._Latitude
		End Get
		Set
			If (String.Equals(Me._Latitude, value) = False) Then
				Me.OnLatitudeChanging(value)
				Me.SendPropertyChanging
				Me._Latitude = value
				Me.SendPropertyChanged("Latitude")
				Me.OnLatitudeChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="NChar(10)")>
	Public Property Longitude() As String
		Get
			Return Me._Longitude
		End Get
		Set
			If (String.Equals(Me._Longitude, value) = False) Then
				Me.OnLongitudeChanging(value)
				Me.SendPropertyChanging
				Me._Longitude = value
				Me.SendPropertyChanged("Longitude")
				Me.OnLongitudeChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationStateID", DbType:="Int")>
	Public Property LocationStateID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationStateID
		End Get
		Set
			If (Me._LocationStateID.Equals(value) = False) Then
				If (Me._LocationState.HasLoadedOrAssignedValue OrElse Me._LocationState1.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLocationStateIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationStateID = value
				Me.SendPropertyChanged("LocationStateID")
				Me.OnLocationStateIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", DbType:="Int")>
	Public Property LocationCountryID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If (Me._LocationCountryID.Equals(value) = False) Then
				If Me._LocationCountry.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLocationCountryIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationCountryID = value
				Me.SendPropertyChanged("LocationCountryID")
				Me.OnLocationCountryIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value) _
						= False) Then
				Me.OnModifiedIDChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedID = value
				Me.SendPropertyChanged("ModifiedID")
				Me.OnModifiedIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value) _
						= False) Then
				Me.OnModifiedDTChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDT = value
				Me.SendPropertyChanged("ModifiedDT")
				Me.OnModifiedDTChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LocationCity_CollectionItem", Storage:="_CollectionItems", ThisKey:="LocationCityID", OtherKey:="LocationCityID")>
	Public Property CollectionItems() As EntitySet(Of CollectionItem)
		Get
			Return Me._CollectionItems
		End Get
		Set
			Me._CollectionItems.Assign(value)
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LocationCountry_LocationCity", Storage:="_LocationCountry", ThisKey:="LocationCountryID", OtherKey:="LocationCountryID", IsForeignKey:=True)>
	Public Property LocationCountry() As LocationCountry
		Get
			Return Me._LocationCountry.Entity
		End Get
		Set
			Dim previousValue As LocationCountry = Me._LocationCountry.Entity
			If ((Object.Equals(previousValue, value) = False) _
						OrElse (Me._LocationCountry.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing) _
							= False) Then
					Me._LocationCountry.Entity = Nothing
					previousValue.LocationCities.Remove(Me)
				End If
				Me._LocationCountry.Entity = value
				If ((value Is Nothing) _
							= False) Then
					value.LocationCities.Add(Me)
					Me._LocationCountryID = value.LocationCountryID
				Else
					Me._LocationCountryID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("LocationCountry")
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LocationState_LocationCity", Storage:="_LocationState", ThisKey:="LocationStateID", OtherKey:="LocationStateID", IsForeignKey:=True)>
	Public Property LocationState() As LocationState
		Get
			Return Me._LocationState.Entity
		End Get
		Set
			Dim previousValue As LocationState = Me._LocationState.Entity
			If ((Object.Equals(previousValue, value) = False) _
						OrElse (Me._LocationState.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing) _
							= False) Then
					Me._LocationState.Entity = Nothing
					previousValue.LocationCities.Remove(Me)
				End If
				Me._LocationState.Entity = value
				If ((value Is Nothing) _
							= False) Then
					value.LocationCities.Add(Me)
					Me._LocationStateID = value.LocationStateID
				Else
					Me._LocationStateID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("LocationState")
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LocationState_LocationCity1", Storage:="_LocationState1", ThisKey:="LocationStateID", OtherKey:="LocationStateID", IsForeignKey:=True)>
	Public Property LocationState1() As LocationState
		Get
			Return Me._LocationState1.Entity
		End Get
		Set
			Dim previousValue As LocationState = Me._LocationState1.Entity
			If ((Object.Equals(previousValue, value) = False) _
						OrElse (Me._LocationState1.HasLoadedOrAssignedValue = False)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing) _
							= False) Then
					Me._LocationState1.Entity = Nothing
					previousValue.LocationCities1.Remove(Me)
				End If
				Me._LocationState1.Entity = value
				If ((value Is Nothing) _
							= False) Then
					value.LocationCities1.Add(Me)
					Me._LocationStateID = value.LocationStateID
				Else
					Me._LocationStateID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("LocationState1")
			End If
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_CollectionItems(ByVal entity As CollectionItem)
		Me.SendPropertyChanging
		entity.LocationCity = Me
	End Sub

	Private Sub detach_CollectionItems(ByVal entity As CollectionItem)
		Me.SendPropertyChanging
		entity.LocationCity = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LocationCountry")>
Partial Public Class LocationCountry
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _LocationCountryID As Integer

	Private _CountryNM As String

	Private _CountryDS As String

	Private _Latitude As String

	Private _Longitude As String

	Private _ModifiedID As Integer

	Private _ModifiedDT As Date

	Private _CollectionItems As EntitySet(Of CollectionItem)

	Private _LocationCities As EntitySet(Of LocationCity)

	Private _LocationStates As EntitySet(Of LocationState)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnLocationCountryIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnLocationCountryIDChanged()
	End Sub
	Partial Private Sub OnCountryNMChanging(value As String)
	End Sub
	Partial Private Sub OnCountryNMChanged()
	End Sub
	Partial Private Sub OnCountryDSChanging(value As String)
	End Sub
	Partial Private Sub OnCountryDSChanged()
	End Sub
	Partial Private Sub OnLatitudeChanging(value As String)
	End Sub
	Partial Private Sub OnLatitudeChanged()
	End Sub
	Partial Private Sub OnLongitudeChanging(value As String)
	End Sub
	Partial Private Sub OnLongitudeChanged()
	End Sub
	Partial Private Sub OnModifiedIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnModifiedIDChanged()
	End Sub
	Partial Private Sub OnModifiedDTChanging(value As Date)
	End Sub
	Partial Private Sub OnModifiedDTChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._CollectionItems = New EntitySet(Of CollectionItem)(AddressOf Me.attach_CollectionItems, AddressOf Me.detach_CollectionItems)
		Me._LocationCities = New EntitySet(Of LocationCity)(AddressOf Me.attach_LocationCities, AddressOf Me.detach_LocationCities)
		Me._LocationStates = New EntitySet(Of LocationState)(AddressOf Me.attach_LocationStates, AddressOf Me.detach_LocationStates)
		OnCreated
	End Sub

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
	Public Property LocationCountryID() As Integer
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If ((Me._LocationCountryID = value) _
						= False) Then
				Me.OnLocationCountryIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationCountryID = value
				Me.SendPropertyChanged("LocationCountryID")
				Me.OnLocationCountryIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=False)>
	Public Property CountryNM() As String
		Get
			Return Me._CountryNM
		End Get
		Set
			If (String.Equals(Me._CountryNM, value) = False) Then
				Me.OnCountryNMChanging(value)
				Me.SendPropertyChanging
				Me._CountryNM = value
				Me.SendPropertyChanged("CountryNM")
				Me.OnCountryNMChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryDS", DbType:="NVarChar(MAX)")>
	Public Property CountryDS() As String
		Get
			Return Me._CountryDS
		End Get
		Set
			If (String.Equals(Me._CountryDS, value) = False) Then
				Me.OnCountryDSChanging(value)
				Me.SendPropertyChanging
				Me._CountryDS = value
				Me.SendPropertyChanged("CountryDS")
				Me.OnCountryDSChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="NChar(10)")>
	Public Property Latitude() As String
		Get
			Return Me._Latitude
		End Get
		Set
			If (String.Equals(Me._Latitude, value) = False) Then
				Me.OnLatitudeChanging(value)
				Me.SendPropertyChanging
				Me._Latitude = value
				Me.SendPropertyChanged("Latitude")
				Me.OnLatitudeChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="NChar(10)")>
	Public Property Longitude() As String
		Get
			Return Me._Longitude
		End Get
		Set
			If (String.Equals(Me._Longitude, value) = False) Then
				Me.OnLongitudeChanging(value)
				Me.SendPropertyChanging
				Me._Longitude = value
				Me.SendPropertyChanged("Longitude")
				Me.OnLongitudeChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value) _
						= False) Then
				Me.OnModifiedIDChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedID = value
				Me.SendPropertyChanged("ModifiedID")
				Me.OnModifiedIDChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value) _
						= False) Then
				Me.OnModifiedDTChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDT = value
				Me.SendPropertyChanged("ModifiedDT")
				Me.OnModifiedDTChanged
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LocationCountry_CollectionItem", Storage:="_CollectionItems", ThisKey:="LocationCountryID", OtherKey:="LocationCountryID")>
	Public Property CollectionItems() As EntitySet(Of CollectionItem)
		Get
			Return Me._CollectionItems
		End Get
		Set
			Me._CollectionItems.Assign(value)
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LocationCountry_LocationCity", Storage:="_LocationCities", ThisKey:="LocationCountryID", OtherKey:="LocationCountryID")>
	Public Property LocationCities() As EntitySet(Of LocationCity)
		Get
			Return Me._LocationCities
		End Get
		Set
			Me._LocationCities.Assign(value)
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LocationCountry_LocationState", Storage:="_LocationStates", ThisKey:="LocationCountryID", OtherKey:="LocationCountryID")>
	Public Property LocationStates() As EntitySet(Of LocationState)
		Get
			Return Me._LocationStates
		End Get
		Set
			Me._LocationStates.Assign(value)
		End Set
	End Property

	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub

	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing) _
					= False) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub

	Private Sub attach_CollectionItems(ByVal entity As CollectionItem)
		Me.SendPropertyChanging
		entity.LocationCountry = Me
	End Sub

	Private Sub detach_CollectionItems(ByVal entity As CollectionItem)
		Me.SendPropertyChanging
		entity.LocationCountry = Nothing
	End Sub

	Private Sub attach_LocationCities(ByVal entity As LocationCity)
		Me.SendPropertyChanging
		entity.LocationCountry = Me
	End Sub

	Private Sub detach_LocationCities(ByVal entity As LocationCity)
		Me.SendPropertyChanging
		entity.LocationCountry = Nothing
	End Sub

	Private Sub attach_LocationStates(ByVal entity As LocationState)
		Me.SendPropertyChanging
		entity.LocationCountry = Me
	End Sub

	Private Sub detach_LocationStates(ByVal entity As LocationState)
		Me.SendPropertyChanging
		entity.LocationCountry = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LocationState")>
Partial Public Class LocationState
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

	Private _LocationStateID As Integer

	Private _StateNM As String

	Private _StateCD As String

	Private _StateDS As String

	Private _LocationCountryID As System.Nullable(Of Integer)

	Private _ModifiedID As Integer

	Private _ModifiedDT As Date

	Private _CollectionItems As EntitySet(Of CollectionItem)

	Private _LocationCities As EntitySet(Of LocationCity)

	Private _LocationCities1 As EntitySet(Of LocationCity)

	Private _LocationCountry As EntityRef(Of LocationCountry)

#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnLocationStateIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnLocationStateIDChanged()
	End Sub
	Partial Private Sub OnStateNMChanging(value As String)
	End Sub
	Partial Private Sub OnStateNMChanged()
	End Sub
	Partial Private Sub OnStateCDChanging(value As String)
	End Sub
	Partial Private Sub OnStateCDChanged()
	End Sub
	Partial Private Sub OnStateDSChanging(value As String)
	End Sub
	Partial Private Sub OnStateDSChanged()
	End Sub
	Partial Private Sub OnLocationCountryIDChanging(value As System.Nullable(Of Integer))
	End Sub
	Partial Private Sub OnLocationCountryIDChanged()
	End Sub
	Partial Private Sub OnModifiedIDChanging(value As Integer)
	End Sub
	Partial Private Sub OnModifiedIDChanged()
	End Sub
	Partial Private Sub OnModifiedDTChanging(value As Date)
	End Sub
	Partial Private Sub OnModifiedDTChanged()
	End Sub
#End Region

	Public Sub New()
		MyBase.New
		Me._CollectionItems = New EntitySet(Of CollectionItem)(AddressOf Me.attach_CollectionItems, AddressOf Me.detach_CollectionItems)
		Me._LocationCities = New EntitySet(Of LocationCity)(AddressOf Me.attach_LocationCities, AddressOf Me.detach_LocationCities)
		Me._LocationCities1 = New EntitySet(Of LocationCity)(AddressOf Me.attach_LocationCities1, AddressOf Me.detach_LocationCities1)
		Me._LocationCountry = CType(Nothing, EntityRef(Of LocationCountry))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationStateID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property LocationStateID() As Integer
		Get
			Return Me._LocationStateID
		End Get
		Set
			If ((Me._LocationStateID = value)  _
						= false) Then
				Me.OnLocationStateIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationStateID = value
				Me.SendPropertyChanged("LocationStateID")
				Me.OnLocationStateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property StateNM() As String
		Get
			Return Me._StateNM
		End Get
		Set
			If (String.Equals(Me._StateNM, value) = false) Then
				Me.OnStateNMChanging(value)
				Me.SendPropertyChanging
				Me._StateNM = value
				Me.SendPropertyChanged("StateNM")
				Me.OnStateNMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateCD", DbType:="NVarChar(50)")>  _
	Public Property StateCD() As String
		Get
			Return Me._StateCD
		End Get
		Set
			If (String.Equals(Me._StateCD, value) = false) Then
				Me.OnStateCDChanging(value)
				Me.SendPropertyChanging
				Me._StateCD = value
				Me.SendPropertyChanged("StateCD")
				Me.OnStateCDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateDS", DbType:="NVarChar(MAX)")>  _
	Public Property StateDS() As String
		Get
			Return Me._StateDS
		End Get
		Set
			If (String.Equals(Me._StateDS, value) = false) Then
				Me.OnStateDSChanging(value)
				Me.SendPropertyChanging
				Me._StateDS = value
				Me.SendPropertyChanged("StateDS")
				Me.OnStateDSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", DbType:="Int")>  _
	Public Property LocationCountryID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If (Me._LocationCountryID.Equals(value) = false) Then
				If Me._LocationCountry.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLocationCountryIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationCountryID = value
				Me.SendPropertyChanged("LocationCountryID")
				Me.OnLocationCountryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me.OnModifiedIDChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedID = value
				Me.SendPropertyChanged("ModifiedID")
				Me.OnModifiedIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me.OnModifiedDTChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDT = value
				Me.SendPropertyChanged("ModifiedDT")
				Me.OnModifiedDTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LocationState_CollectionItem", Storage:="_CollectionItems", ThisKey:="LocationStateID", OtherKey:="LocationStateID")>  _
	Public Property CollectionItems() As EntitySet(Of CollectionItem)
		Get
			Return Me._CollectionItems
		End Get
		Set
			Me._CollectionItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LocationState_LocationCity", Storage:="_LocationCities", ThisKey:="LocationStateID", OtherKey:="LocationStateID")>  _
	Public Property LocationCities() As EntitySet(Of LocationCity)
		Get
			Return Me._LocationCities
		End Get
		Set
			Me._LocationCities.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LocationState_LocationCity1", Storage:="_LocationCities1", ThisKey:="LocationStateID", OtherKey:="LocationStateID")>  _
	Public Property LocationCities1() As EntitySet(Of LocationCity)
		Get
			Return Me._LocationCities1
		End Get
		Set
			Me._LocationCities1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LocationCountry_LocationState", Storage:="_LocationCountry", ThisKey:="LocationCountryID", OtherKey:="LocationCountryID", IsForeignKey:=true)>  _
	Public Property LocationCountry() As LocationCountry
		Get
			Return Me._LocationCountry.Entity
		End Get
		Set
			Dim previousValue As LocationCountry = Me._LocationCountry.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LocationCountry.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LocationCountry.Entity = Nothing
					previousValue.LocationStates.Remove(Me)
				End If
				Me._LocationCountry.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LocationStates.Add(Me)
					Me._LocationCountryID = value.LocationCountryID
				Else
					Me._LocationCountryID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("LocationCountry")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CollectionItems(ByVal entity As CollectionItem)
		Me.SendPropertyChanging
		entity.LocationState = Me
	End Sub
	
	Private Sub detach_CollectionItems(ByVal entity As CollectionItem)
		Me.SendPropertyChanging
		entity.LocationState = Nothing
	End Sub
	
	Private Sub attach_LocationCities(ByVal entity As LocationCity)
		Me.SendPropertyChanging
		entity.LocationState = Me
	End Sub
	
	Private Sub detach_LocationCities(ByVal entity As LocationCity)
		Me.SendPropertyChanging
		entity.LocationState = Nothing
	End Sub
	
	Private Sub attach_LocationCities1(ByVal entity As LocationCity)
		Me.SendPropertyChanging
		entity.LocationState1 = Me
	End Sub
	
	Private Sub detach_LocationCities1(ByVal entity As LocationCity)
		Me.SendPropertyChanging
		entity.LocationState1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vwSpecimenImage")>  _
Partial Public Class vwSpecimenImage
	
	Private _CollectionItemImageID As Integer
	
	Private _CollectionItemID As Integer
	
	Private _ImageType As String
	
	Private _DisplayOrder As Integer
	
	Private _ImageNM As String
	
	Private _ImageDS As String
	
	Private _ImageFileNM As String
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemImageID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property CollectionItemImageID() As Integer
		Get
			Return Me._CollectionItemImageID
		End Get
		Set
			If ((Me._CollectionItemImageID = value)  _
						= false) Then
				Me._CollectionItemImageID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageType", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageType() As String
		Get
			Return Me._ImageType
		End Get
		Set
			If (String.Equals(Me._ImageType, value) = false) Then
				Me._ImageType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayOrder", DbType:="Int NOT NULL")>  _
	Public Property DisplayOrder() As Integer
		Get
			Return Me._DisplayOrder
		End Get
		Set
			If ((Me._DisplayOrder = value)  _
						= false) Then
				Me._DisplayOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageNM() As String
		Get
			Return Me._ImageNM
		End Get
		Set
			If (String.Equals(Me._ImageNM, value) = false) Then
				Me._ImageNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageDS", DbType:="NVarChar(MAX)")>  _
	Public Property ImageDS() As String
		Get
			Return Me._ImageDS
		End Get
		Set
			If (String.Equals(Me._ImageDS, value) = false) Then
				Me._ImageDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageFileNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageFileNM() As String
		Get
			Return Me._ImageFileNM
		End Get
		Set
			If (String.Equals(Me._ImageFileNM, value) = false) Then
				Me._ImageFileNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vwCollectionItemImages")>  _
Partial Public Class vwCollectionItemImage
	
	Private _CollectionItemID As Integer
	
	Private _SpecimenNumber As Double
	
	Private _Nickname As String
	
	Private _CollectionNM As String
	
	Private _PrimaryMineralID As System.Nullable(Of Integer)
	
	Private _MineralNM As String
	
	Private _MineralDS As String
	
	Private _MineralVariety As String
	
	Private _MineNM As String
	
	Private _PurchaseDate As System.Nullable(Of Date)
	
	Private _PurchasePrice As System.Nullable(Of Decimal)
	
	Private _Value As System.Nullable(Of Decimal)
	
	Private _ShowWherePurchased As String
	
	Private _PurchasedFromCompanyID As System.Nullable(Of Integer)
	
	Private _StorageLocation As String
	
	Private _SpecimenNotes As String
	
	Private _Description As String
	
	Private _ExCollection As String
	
	Private _HeightCm As System.Nullable(Of Double)
	
	Private _WidthCm As System.Nullable(Of Double)
	
	Private _ThicknessCm As System.Nullable(Of Double)
	
	Private _HeightIn As System.Nullable(Of Double)
	
	Private _WidthIn As System.Nullable(Of Double)
	
	Private _ThicknessIn As System.Nullable(Of Double)
	
	Private _WeightGr As String
	
	Private _WeightKg As String
	
	Private _SaleDT As System.Nullable(Of Date)
	
	Private _SalePrice As System.Nullable(Of Decimal)
	
	Private _LocationCityID As System.Nullable(Of Integer)
	
	Private _LocationStateID As System.Nullable(Of Integer)
	
	Private _LocationCountryID As System.Nullable(Of Integer)
	
	Private _CompanyNM As String
	
	Private _City As String
	
	Private _CompanyDS As String
	
	Private _CityDS As String
	
	Private _CountryNM As String
	
	Private _CountryDS As String
	
	Private _Latitude As String
	
	Private _Longitude As String
	
	Private _StateNM As String
	
	Private _StateCD As String
	
	Private _StateDS As String
	
	Private _CollectionID As Integer
	
	Private _CollectionItemImageID As System.Nullable(Of Integer)
	
	Private _ImageType As String
	
	Private _DisplayOrder As System.Nullable(Of Integer)
	
	Private _ImageNM As String
	
	Private _ImageDS As String
	
	Private _ImageFileNM As String
	
	Private _ModifiedID As System.Nullable(Of Integer)
	
	Private _ModifiedDT As System.Nullable(Of Date)
	
	Private _IsFeatured As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNumber", DbType:="Float NOT NULL")>  _
	Public Property SpecimenNumber() As Double
		Get
			Return Me._SpecimenNumber
		End Get
		Set
			If ((Me._SpecimenNumber = value)  _
						= false) Then
				Me._SpecimenNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nickname", DbType:="NVarChar(255)")>  _
	Public Property Nickname() As String
		Get
			Return Me._Nickname
		End Get
		Set
			If (String.Equals(Me._Nickname, value) = false) Then
				Me._Nickname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionNM", DbType:="NVarChar(255)")>  _
	Public Property CollectionNM() As String
		Get
			Return Me._CollectionNM
		End Get
		Set
			If (String.Equals(Me._CollectionNM, value) = false) Then
				Me._CollectionNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryMineralID", DbType:="Int")>  _
	Public Property PrimaryMineralID() As System.Nullable(Of Integer)
		Get
			Return Me._PrimaryMineralID
		End Get
		Set
			If (Me._PrimaryMineralID.Equals(value) = false) Then
				Me._PrimaryMineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralNM", DbType:="NVarChar(255)")>  _
	Public Property MineralNM() As String
		Get
			Return Me._MineralNM
		End Get
		Set
			If (String.Equals(Me._MineralNM, value) = false) Then
				Me._MineralNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralDS", DbType:="NVarChar(MAX)")>  _
	Public Property MineralDS() As String
		Get
			Return Me._MineralDS
		End Get
		Set
			If (String.Equals(Me._MineralDS, value) = false) Then
				Me._MineralDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralVariety", DbType:="NVarChar(255)")>  _
	Public Property MineralVariety() As String
		Get
			Return Me._MineralVariety
		End Get
		Set
			If (String.Equals(Me._MineralVariety, value) = false) Then
				Me._MineralVariety = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineNM", DbType:="NVarChar(255)")>  _
	Public Property MineNM() As String
		Get
			Return Me._MineNM
		End Get
		Set
			If (String.Equals(Me._MineNM, value) = false) Then
				Me._MineNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseDate", DbType:="DateTime")>  _
	Public Property PurchaseDate() As System.Nullable(Of Date)
		Get
			Return Me._PurchaseDate
		End Get
		Set
			If (Me._PurchaseDate.Equals(value) = false) Then
				Me._PurchaseDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchasePrice", DbType:="Money")>  _
	Public Property PurchasePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._PurchasePrice
		End Get
		Set
			If (Me._PurchasePrice.Equals(value) = false) Then
				Me._PurchasePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Money")>  _
	Public Property Value() As System.Nullable(Of Decimal)
		Get
			Return Me._Value
		End Get
		Set
			If (Me._Value.Equals(value) = false) Then
				Me._Value = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowWherePurchased", DbType:="NVarChar(255)")>  _
	Public Property ShowWherePurchased() As String
		Get
			Return Me._ShowWherePurchased
		End Get
		Set
			If (String.Equals(Me._ShowWherePurchased, value) = false) Then
				Me._ShowWherePurchased = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchasedFromCompanyID", DbType:="Int")>  _
	Public Property PurchasedFromCompanyID() As System.Nullable(Of Integer)
		Get
			Return Me._PurchasedFromCompanyID
		End Get
		Set
			If (Me._PurchasedFromCompanyID.Equals(value) = false) Then
				Me._PurchasedFromCompanyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StorageLocation", DbType:="NVarChar(255)")>  _
	Public Property StorageLocation() As String
		Get
			Return Me._StorageLocation
		End Get
		Set
			If (String.Equals(Me._StorageLocation, value) = false) Then
				Me._StorageLocation = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNotes", DbType:="NVarChar(MAX)")>  _
	Public Property SpecimenNotes() As String
		Get
			Return Me._SpecimenNotes
		End Get
		Set
			If (String.Equals(Me._SpecimenNotes, value) = false) Then
				Me._SpecimenNotes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExCollection", DbType:="NVarChar(255)")>  _
	Public Property ExCollection() As String
		Get
			Return Me._ExCollection
		End Get
		Set
			If (String.Equals(Me._ExCollection, value) = false) Then
				Me._ExCollection = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeightCm", DbType:="Float")>  _
	Public Property HeightCm() As System.Nullable(Of Double)
		Get
			Return Me._HeightCm
		End Get
		Set
			If (Me._HeightCm.Equals(value) = false) Then
				Me._HeightCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidthCm", DbType:="Float")>  _
	Public Property WidthCm() As System.Nullable(Of Double)
		Get
			Return Me._WidthCm
		End Get
		Set
			If (Me._WidthCm.Equals(value) = false) Then
				Me._WidthCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThicknessCm", DbType:="Float")>  _
	Public Property ThicknessCm() As System.Nullable(Of Double)
		Get
			Return Me._ThicknessCm
		End Get
		Set
			If (Me._ThicknessCm.Equals(value) = false) Then
				Me._ThicknessCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeightIn", DbType:="Float")>  _
	Public Property HeightIn() As System.Nullable(Of Double)
		Get
			Return Me._HeightIn
		End Get
		Set
			If (Me._HeightIn.Equals(value) = false) Then
				Me._HeightIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidthIn", DbType:="Float")>  _
	Public Property WidthIn() As System.Nullable(Of Double)
		Get
			Return Me._WidthIn
		End Get
		Set
			If (Me._WidthIn.Equals(value) = false) Then
				Me._WidthIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThicknessIn", DbType:="Float")>  _
	Public Property ThicknessIn() As System.Nullable(Of Double)
		Get
			Return Me._ThicknessIn
		End Get
		Set
			If (Me._ThicknessIn.Equals(value) = false) Then
				Me._ThicknessIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightGr", DbType:="NVarChar(255)")>  _
	Public Property WeightGr() As String
		Get
			Return Me._WeightGr
		End Get
		Set
			If (String.Equals(Me._WeightGr, value) = false) Then
				Me._WeightGr = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightKg", DbType:="NVarChar(255)")>  _
	Public Property WeightKg() As String
		Get
			Return Me._WeightKg
		End Get
		Set
			If (String.Equals(Me._WeightKg, value) = false) Then
				Me._WeightKg = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaleDT", DbType:="DateTime")>  _
	Public Property SaleDT() As System.Nullable(Of Date)
		Get
			Return Me._SaleDT
		End Get
		Set
			If (Me._SaleDT.Equals(value) = false) Then
				Me._SaleDT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalePrice", DbType:="Money")>  _
	Public Property SalePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._SalePrice
		End Get
		Set
			If (Me._SalePrice.Equals(value) = false) Then
				Me._SalePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCityID", DbType:="Int")>  _
	Public Property LocationCityID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCityID
		End Get
		Set
			If (Me._LocationCityID.Equals(value) = false) Then
				Me._LocationCityID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationStateID", DbType:="Int")>  _
	Public Property LocationStateID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationStateID
		End Get
		Set
			If (Me._LocationStateID.Equals(value) = false) Then
				Me._LocationStateID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", DbType:="Int")>  _
	Public Property LocationCountryID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If (Me._LocationCountryID.Equals(value) = false) Then
				Me._LocationCountryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyNM", DbType:="NVarChar(255)")>  _
	Public Property CompanyNM() As String
		Get
			Return Me._CompanyNM
		End Get
		Set
			If (String.Equals(Me._CompanyNM, value) = false) Then
				Me._CompanyNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(255)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyDS", DbType:="NVarChar(MAX)")>  _
	Public Property CompanyDS() As String
		Get
			Return Me._CompanyDS
		End Get
		Set
			If (String.Equals(Me._CompanyDS, value) = false) Then
				Me._CompanyDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityDS", DbType:="NVarChar(MAX)")>  _
	Public Property CityDS() As String
		Get
			Return Me._CityDS
		End Get
		Set
			If (String.Equals(Me._CityDS, value) = false) Then
				Me._CityDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryNM", DbType:="NVarChar(255)")>  _
	Public Property CountryNM() As String
		Get
			Return Me._CountryNM
		End Get
		Set
			If (String.Equals(Me._CountryNM, value) = false) Then
				Me._CountryNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryDS", DbType:="NVarChar(MAX)")>  _
	Public Property CountryDS() As String
		Get
			Return Me._CountryDS
		End Get
		Set
			If (String.Equals(Me._CountryDS, value) = false) Then
				Me._CountryDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="NChar(10)")>  _
	Public Property Latitude() As String
		Get
			Return Me._Latitude
		End Get
		Set
			If (String.Equals(Me._Latitude, value) = false) Then
				Me._Latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="NChar(10)")>  _
	Public Property Longitude() As String
		Get
			Return Me._Longitude
		End Get
		Set
			If (String.Equals(Me._Longitude, value) = false) Then
				Me._Longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateNM", DbType:="NVarChar(255)")>  _
	Public Property StateNM() As String
		Get
			Return Me._StateNM
		End Get
		Set
			If (String.Equals(Me._StateNM, value) = false) Then
				Me._StateNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateCD", DbType:="NVarChar(50)")>  _
	Public Property StateCD() As String
		Get
			Return Me._StateCD
		End Get
		Set
			If (String.Equals(Me._StateCD, value) = false) Then
				Me._StateCD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateDS", DbType:="NVarChar(MAX)")>  _
	Public Property StateDS() As String
		Get
			Return Me._StateDS
		End Get
		Set
			If (String.Equals(Me._StateDS, value) = false) Then
				Me._StateDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionID", DbType:="Int NOT NULL")>  _
	Public Property CollectionID() As Integer
		Get
			Return Me._CollectionID
		End Get
		Set
			If ((Me._CollectionID = value)  _
						= false) Then
				Me._CollectionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemImageID", DbType:="Int")>  _
	Public Property CollectionItemImageID() As System.Nullable(Of Integer)
		Get
			Return Me._CollectionItemImageID
		End Get
		Set
			If (Me._CollectionItemImageID.Equals(value) = false) Then
				Me._CollectionItemImageID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageType", DbType:="NVarChar(255)")>  _
	Public Property ImageType() As String
		Get
			Return Me._ImageType
		End Get
		Set
			If (String.Equals(Me._ImageType, value) = false) Then
				Me._ImageType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayOrder", DbType:="Int")>  _
	Public Property DisplayOrder() As System.Nullable(Of Integer)
		Get
			Return Me._DisplayOrder
		End Get
		Set
			If (Me._DisplayOrder.Equals(value) = false) Then
				Me._DisplayOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageNM", DbType:="NVarChar(255)")>  _
	Public Property ImageNM() As String
		Get
			Return Me._ImageNM
		End Get
		Set
			If (String.Equals(Me._ImageNM, value) = false) Then
				Me._ImageNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageDS", DbType:="NVarChar(MAX)")>  _
	Public Property ImageDS() As String
		Get
			Return Me._ImageDS
		End Get
		Set
			If (String.Equals(Me._ImageDS, value) = false) Then
				Me._ImageDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageFileNM", DbType:="NVarChar(255)")>  _
	Public Property ImageFileNM() As String
		Get
			Return Me._ImageFileNM
		End Get
		Set
			If (String.Equals(Me._ImageFileNM, value) = false) Then
				Me._ImageFileNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int")>  _
	Public Property ModifiedID() As System.Nullable(Of Integer)
		Get
			Return Me._ModifiedID
		End Get
		Set
			If (Me._ModifiedID.Equals(value) = false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime")>  _
	Public Property ModifiedDT() As System.Nullable(Of Date)
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If (Me._ModifiedDT.Equals(value) = false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsFeatured", DbType:="Int NOT NULL")>  _
	Public Property IsFeatured() As Integer
		Get
			Return Me._IsFeatured
		End Get
		Set
			If ((Me._IsFeatured = value)  _
						= false) Then
				Me._IsFeatured = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vwCollectionItems")>  _
Partial Public Class vwCollectionItem
	
	Private _CollectionItemID As Integer
	
	Private _SpecimenNumber As Double
	
	Private _Nickname As String
	
	Private _CollectionNM As String
	
	Private _PrimaryMineralID As System.Nullable(Of Integer)
	
	Private _PrimaryMineralNM As String
	
	Private _PrimaryMineralDS As String
	
	Private _MineralVariety As String
	
	Private _MineNM As String
	
	Private _PurchaseDate As System.Nullable(Of Date)
	
	Private _PurchasePrice As System.Nullable(Of Decimal)
	
	Private _Value As System.Nullable(Of Decimal)
	
	Private _ShowWherePurchased As String
	
	Private _PurchasedFromCompanyID As System.Nullable(Of Integer)
	
	Private _StorageLocation As String
	
	Private _SpecimenNotes As String
	
	Private _Description As String
	
	Private _ExCollection As String
	
	Private _HeightCm As System.Nullable(Of Double)
	
	Private _WidthCm As System.Nullable(Of Double)
	
	Private _ThicknessCm As System.Nullable(Of Double)
	
	Private _HeightIn As System.Nullable(Of Double)
	
	Private _WidthIn As System.Nullable(Of Double)
	
	Private _ThicknessIn As System.Nullable(Of Double)
	
	Private _WeightGr As String
	
	Private _WeightKg As String
	
	Private _SaleDT As System.Nullable(Of Date)
	
	Private _SalePrice As System.Nullable(Of Decimal)
	
	Private _LocationCityID As System.Nullable(Of Integer)
	
	Private _LocationStateID As System.Nullable(Of Integer)
	
	Private _LocationCountryID As System.Nullable(Of Integer)
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Private _CompanyNM As String
	
	Private _CompanyDS As String
	
	Private _City As String
	
	Private _CityDS As String
	
	Private _CountryNM As String
	
	Private _CountryDS As String
	
	Private _Latitude As String
	
	Private _Longitude As String
	
	Private _StateNM As String
	
	Private _StateCD As String
	
	Private _StateDS As String
	
	Private _CollectionID As Integer
	
	Private _CollectionItemImageID As System.Nullable(Of Integer)
	
	Private _ImageType As String
	
	Private _DisplayOrder As System.Nullable(Of Integer)
	
	Private _ImageNM As String
	
	Private _ImageDS As String
	
	Private _ImageFileNM As String
	
	Private _ThumbImageFileNM As String
	
	Private _MineralID As System.Nullable(Of Integer)
	
	Private _MineralNM As String

	Private _MineralDS As String

	Private _IsSold As Integer

	Private _IsFeatured As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNumber", DbType:="Float NOT NULL")>  _
	Public Property SpecimenNumber() As Double
		Get
			Return Me._SpecimenNumber
		End Get
		Set
			If ((Me._SpecimenNumber = value)  _
						= false) Then
				Me._SpecimenNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nickname", DbType:="NVarChar(255)")>  _
	Public Property Nickname() As String
		Get
			Return Me._Nickname
		End Get
		Set
			If (String.Equals(Me._Nickname, value) = false) Then
				Me._Nickname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionNM", DbType:="NVarChar(255)")>  _
	Public Property CollectionNM() As String
		Get
			Return Me._CollectionNM
		End Get
		Set
			If (String.Equals(Me._CollectionNM, value) = false) Then
				Me._CollectionNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryMineralID", DbType:="Int")>  _
	Public Property PrimaryMineralID() As System.Nullable(Of Integer)
		Get
			Return Me._PrimaryMineralID
		End Get
		Set
			If (Me._PrimaryMineralID.Equals(value) = false) Then
				Me._PrimaryMineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryMineralNM", DbType:="NVarChar(255)")>  _
	Public Property PrimaryMineralNM() As String
		Get
			Return Me._PrimaryMineralNM
		End Get
		Set
			If (String.Equals(Me._PrimaryMineralNM, value) = false) Then
				Me._PrimaryMineralNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryMineralDS", DbType:="NVarChar(MAX)")>  _
	Public Property PrimaryMineralDS() As String
		Get
			Return Me._PrimaryMineralDS
		End Get
		Set
			If (String.Equals(Me._PrimaryMineralDS, value) = false) Then
				Me._PrimaryMineralDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralVariety", DbType:="NVarChar(255)")>  _
	Public Property MineralVariety() As String
		Get
			Return Me._MineralVariety
		End Get
		Set
			If (String.Equals(Me._MineralVariety, value) = false) Then
				Me._MineralVariety = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineNM", DbType:="NVarChar(255)")>  _
	Public Property MineNM() As String
		Get
			Return Me._MineNM
		End Get
		Set
			If (String.Equals(Me._MineNM, value) = false) Then
				Me._MineNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseDate", DbType:="DateTime")>  _
	Public Property PurchaseDate() As System.Nullable(Of Date)
		Get
			Return Me._PurchaseDate
		End Get
		Set
			If (Me._PurchaseDate.Equals(value) = false) Then
				Me._PurchaseDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchasePrice", DbType:="Money")>  _
	Public Property PurchasePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._PurchasePrice
		End Get
		Set
			If (Me._PurchasePrice.Equals(value) = false) Then
				Me._PurchasePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Money")>  _
	Public Property Value() As System.Nullable(Of Decimal)
		Get
			Return Me._Value
		End Get
		Set
			If (Me._Value.Equals(value) = false) Then
				Me._Value = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowWherePurchased", DbType:="NVarChar(255)")>  _
	Public Property ShowWherePurchased() As String
		Get
			Return Me._ShowWherePurchased
		End Get
		Set
			If (String.Equals(Me._ShowWherePurchased, value) = false) Then
				Me._ShowWherePurchased = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchasedFromCompanyID", DbType:="Int")>  _
	Public Property PurchasedFromCompanyID() As System.Nullable(Of Integer)
		Get
			Return Me._PurchasedFromCompanyID
		End Get
		Set
			If (Me._PurchasedFromCompanyID.Equals(value) = false) Then
				Me._PurchasedFromCompanyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StorageLocation", DbType:="NVarChar(255)")>  _
	Public Property StorageLocation() As String
		Get
			Return Me._StorageLocation
		End Get
		Set
			If (String.Equals(Me._StorageLocation, value) = false) Then
				Me._StorageLocation = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNotes", DbType:="NVarChar(MAX)")>  _
	Public Property SpecimenNotes() As String
		Get
			Return Me._SpecimenNotes
		End Get
		Set
			If (String.Equals(Me._SpecimenNotes, value) = false) Then
				Me._SpecimenNotes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExCollection", DbType:="NVarChar(255)")>  _
	Public Property ExCollection() As String
		Get
			Return Me._ExCollection
		End Get
		Set
			If (String.Equals(Me._ExCollection, value) = false) Then
				Me._ExCollection = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeightCm", DbType:="Float")>  _
	Public Property HeightCm() As System.Nullable(Of Double)
		Get
			Return Me._HeightCm
		End Get
		Set
			If (Me._HeightCm.Equals(value) = false) Then
				Me._HeightCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidthCm", DbType:="Float")>  _
	Public Property WidthCm() As System.Nullable(Of Double)
		Get
			Return Me._WidthCm
		End Get
		Set
			If (Me._WidthCm.Equals(value) = false) Then
				Me._WidthCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThicknessCm", DbType:="Float")>  _
	Public Property ThicknessCm() As System.Nullable(Of Double)
		Get
			Return Me._ThicknessCm
		End Get
		Set
			If (Me._ThicknessCm.Equals(value) = false) Then
				Me._ThicknessCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeightIn", DbType:="Float")>  _
	Public Property HeightIn() As System.Nullable(Of Double)
		Get
			Return Me._HeightIn
		End Get
		Set
			If (Me._HeightIn.Equals(value) = false) Then
				Me._HeightIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidthIn", DbType:="Float")>  _
	Public Property WidthIn() As System.Nullable(Of Double)
		Get
			Return Me._WidthIn
		End Get
		Set
			If (Me._WidthIn.Equals(value) = false) Then
				Me._WidthIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThicknessIn", DbType:="Float")>  _
	Public Property ThicknessIn() As System.Nullable(Of Double)
		Get
			Return Me._ThicknessIn
		End Get
		Set
			If (Me._ThicknessIn.Equals(value) = false) Then
				Me._ThicknessIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightGr", DbType:="NVarChar(255)")>  _
	Public Property WeightGr() As String
		Get
			Return Me._WeightGr
		End Get
		Set
			If (String.Equals(Me._WeightGr, value) = false) Then
				Me._WeightGr = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightKg", DbType:="NVarChar(255)")>  _
	Public Property WeightKg() As String
		Get
			Return Me._WeightKg
		End Get
		Set
			If (String.Equals(Me._WeightKg, value) = false) Then
				Me._WeightKg = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaleDT", DbType:="DateTime")>  _
	Public Property SaleDT() As System.Nullable(Of Date)
		Get
			Return Me._SaleDT
		End Get
		Set
			If (Me._SaleDT.Equals(value) = false) Then
				Me._SaleDT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalePrice", DbType:="Money")>  _
	Public Property SalePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._SalePrice
		End Get
		Set
			If (Me._SalePrice.Equals(value) = false) Then
				Me._SalePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCityID", DbType:="Int")>  _
	Public Property LocationCityID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCityID
		End Get
		Set
			If (Me._LocationCityID.Equals(value) = false) Then
				Me._LocationCityID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationStateID", DbType:="Int")>  _
	Public Property LocationStateID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationStateID
		End Get
		Set
			If (Me._LocationStateID.Equals(value) = false) Then
				Me._LocationStateID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", DbType:="Int")>  _
	Public Property LocationCountryID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If (Me._LocationCountryID.Equals(value) = false) Then
				Me._LocationCountryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyNM", DbType:="NVarChar(255)")>  _
	Public Property CompanyNM() As String
		Get
			Return Me._CompanyNM
		End Get
		Set
			If (String.Equals(Me._CompanyNM, value) = false) Then
				Me._CompanyNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyDS", DbType:="NVarChar(MAX)")>  _
	Public Property CompanyDS() As String
		Get
			Return Me._CompanyDS
		End Get
		Set
			If (String.Equals(Me._CompanyDS, value) = false) Then
				Me._CompanyDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(255)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityDS", DbType:="NVarChar(MAX)")>  _
	Public Property CityDS() As String
		Get
			Return Me._CityDS
		End Get
		Set
			If (String.Equals(Me._CityDS, value) = false) Then
				Me._CityDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryNM", DbType:="NVarChar(255)")>  _
	Public Property CountryNM() As String
		Get
			Return Me._CountryNM
		End Get
		Set
			If (String.Equals(Me._CountryNM, value) = false) Then
				Me._CountryNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryDS", DbType:="NVarChar(MAX)")>  _
	Public Property CountryDS() As String
		Get
			Return Me._CountryDS
		End Get
		Set
			If (String.Equals(Me._CountryDS, value) = false) Then
				Me._CountryDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="NChar(15)")>  _
	Public Property Latitude() As String
		Get
			Return Me._Latitude
		End Get
		Set
			If (String.Equals(Me._Latitude, value) = false) Then
				Me._Latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="NChar(15)")>  _
	Public Property Longitude() As String
		Get
			Return Me._Longitude
		End Get
		Set
			If (String.Equals(Me._Longitude, value) = false) Then
				Me._Longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateNM", DbType:="NVarChar(255)")>  _
	Public Property StateNM() As String
		Get
			Return Me._StateNM
		End Get
		Set
			If (String.Equals(Me._StateNM, value) = false) Then
				Me._StateNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateCD", DbType:="NVarChar(50)")>  _
	Public Property StateCD() As String
		Get
			Return Me._StateCD
		End Get
		Set
			If (String.Equals(Me._StateCD, value) = false) Then
				Me._StateCD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateDS", DbType:="NVarChar(MAX)")>  _
	Public Property StateDS() As String
		Get
			Return Me._StateDS
		End Get
		Set
			If (String.Equals(Me._StateDS, value) = false) Then
				Me._StateDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionID", DbType:="Int NOT NULL")>  _
	Public Property CollectionID() As Integer
		Get
			Return Me._CollectionID
		End Get
		Set
			If ((Me._CollectionID = value)  _
						= false) Then
				Me._CollectionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemImageID", DbType:="Int")>  _
	Public Property CollectionItemImageID() As System.Nullable(Of Integer)
		Get
			Return Me._CollectionItemImageID
		End Get
		Set
			If (Me._CollectionItemImageID.Equals(value) = false) Then
				Me._CollectionItemImageID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageType", DbType:="NVarChar(255)")>  _
	Public Property ImageType() As String
		Get
			Return Me._ImageType
		End Get
		Set
			If (String.Equals(Me._ImageType, value) = false) Then
				Me._ImageType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayOrder", DbType:="Int")>  _
	Public Property DisplayOrder() As System.Nullable(Of Integer)
		Get
			Return Me._DisplayOrder
		End Get
		Set
			If (Me._DisplayOrder.Equals(value) = false) Then
				Me._DisplayOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageNM", DbType:="NVarChar(255)")>  _
	Public Property ImageNM() As String
		Get
			Return Me._ImageNM
		End Get
		Set
			If (String.Equals(Me._ImageNM, value) = false) Then
				Me._ImageNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageDS", DbType:="NVarChar(MAX)")>  _
	Public Property ImageDS() As String
		Get
			Return Me._ImageDS
		End Get
		Set
			If (String.Equals(Me._ImageDS, value) = false) Then
				Me._ImageDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageFileNM", DbType:="NVarChar(255)")>  _
	Public Property ImageFileNM() As String
		Get
			Return Me._ImageFileNM
		End Get
		Set
			If (String.Equals(Me._ImageFileNM, value) = false) Then
				Me._ImageFileNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThumbImageFileNM", DbType:="NVarChar(4000)")>  _
	Public Property ThumbImageFileNM() As String
		Get
			Return Me._ThumbImageFileNM
		End Get
		Set
			If (String.Equals(Me._ThumbImageFileNM, value) = false) Then
				Me._ThumbImageFileNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralID", DbType:="Int")>  _
	Public Property MineralID() As System.Nullable(Of Integer)
		Get
			Return Me._MineralID
		End Get
		Set
			If (Me._MineralID.Equals(value) = false) Then
				Me._MineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralNM", DbType:="NVarChar(255)")>  _
	Public Property MineralNM() As String
		Get
			Return Me._MineralNM
		End Get
		Set
			If (String.Equals(Me._MineralNM, value) = false) Then
				Me._MineralNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralDS", DbType:="NVarChar(MAX)")>  _
	Public Property MineralDS() As String
		Get
			Return Me._MineralDS
		End Get
		Set
			If (String.Equals(Me._MineralDS, value) = false) Then
				Me._MineralDS = value
			End If
		End Set
	End Property
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsSold", DbType:="Int NOT NULL")>
	Public Property IsSold() As Integer
		Get
			Return Me._IsSold
		End Get
		Set
			If ((Me._IsSold = Value) _
						= False) Then
				Me._IsSold = Value
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsFeatured", DbType:="Int NOT NULL")>  _
	Public Property IsFeatured() As Integer
		Get
			Return Me._IsFeatured
		End Get
		Set
			If ((Me._IsFeatured = value)  _
						= false) Then
				Me._IsFeatured = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vwMineralCollectionItems")>  _
Partial Public Class vwMineralCollectionItem
	
	Private _CollectionItemID As Integer
	
	Private _SpecimenNumber As Double
	
	Private _Nickname As String
	
	Private _CollectionNM As String
	
	Private _MineralVariety As String
	
	Private _ImageFileNM As String
	
	Private _ImageDS As String
	
	Private _ImageNM As String
	
	Private _ImageType As String
	
	Private _CollectionID As Integer
	
	Private _StateDS As String
	
	Private _StateCD As String
	
	Private _StateNM As String
	
	Private _Longitude As String
	
	Private _Latitude As String
	
	Private _CountryDS As String
	
	Private _CountryNM As String
	
	Private _CityDS As String
	
	Private _City As String
	
	Private _CompanyDS As String
	
	Private _CompanyNM As String
	
	Private _LocationCountryID As System.Nullable(Of Integer)
	
	Private _LocationStateID As System.Nullable(Of Integer)
	
	Private _LocationCityID As System.Nullable(Of Integer)
	
	Private _SalePrice As System.Nullable(Of Decimal)
	
	Private _SaleDT As System.Nullable(Of Date)
	
	Private _WeightKg As String
	
	Private _WeightGr As String
	
	Private _ThicknessIn As System.Nullable(Of Double)
	
	Private _WidthIn As System.Nullable(Of Double)
	
	Private _HeightIn As System.Nullable(Of Double)
	
	Private _ThicknessCm As System.Nullable(Of Double)
	
	Private _WidthCm As System.Nullable(Of Double)
	
	Private _HeightCm As System.Nullable(Of Double)
	
	Private _ExCollection As String
	
	Private _Description As String
	
	Private _SpecimenNotes As String
	
	Private _StorageLocation As String
	
	Private _PurchasedFromCompanyID As System.Nullable(Of Integer)
	
	Private _ShowWherePurchased As String
	
	Private _Value As System.Nullable(Of Decimal)
	
	Private _PurchasePrice As System.Nullable(Of Decimal)
	
	Private _PurchaseDate As System.Nullable(Of Date)
	
	Private _MineNM As String
	
	Private _CollectionItemImageID As System.Nullable(Of Integer)
	
	Private _DisplayOrder As System.Nullable(Of Integer)
	
	Private _PrimaryMineralID As System.Nullable(Of Integer)
	
	Private _PrimaryMineralNM As String
	
	Private _PrimaryMineralDS As String
	
	Private _Position As Integer
	
	Private _MineralID As System.Nullable(Of Integer)
	
	Private _MineralNM As String
	
	Private _MineralDS As String
	Private _IsSold As Integer
	Private _IsFeatured As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNumber", DbType:="Float NOT NULL")>  _
	Public Property SpecimenNumber() As Double
		Get
			Return Me._SpecimenNumber
		End Get
		Set
			If ((Me._SpecimenNumber = value)  _
						= false) Then
				Me._SpecimenNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nickname", DbType:="NVarChar(255)")>  _
	Public Property Nickname() As String
		Get
			Return Me._Nickname
		End Get
		Set
			If (String.Equals(Me._Nickname, value) = false) Then
				Me._Nickname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionNM", DbType:="NVarChar(255)")>  _
	Public Property CollectionNM() As String
		Get
			Return Me._CollectionNM
		End Get
		Set
			If (String.Equals(Me._CollectionNM, value) = false) Then
				Me._CollectionNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralVariety", DbType:="NVarChar(255)")>  _
	Public Property MineralVariety() As String
		Get
			Return Me._MineralVariety
		End Get
		Set
			If (String.Equals(Me._MineralVariety, value) = false) Then
				Me._MineralVariety = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageFileNM", DbType:="NVarChar(255)")>  _
	Public Property ImageFileNM() As String
		Get
			Return Me._ImageFileNM
		End Get
		Set
			If (String.Equals(Me._ImageFileNM, value) = false) Then
				Me._ImageFileNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageDS", DbType:="NVarChar(MAX)")>  _
	Public Property ImageDS() As String
		Get
			Return Me._ImageDS
		End Get
		Set
			If (String.Equals(Me._ImageDS, value) = false) Then
				Me._ImageDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageNM", DbType:="NVarChar(255)")>  _
	Public Property ImageNM() As String
		Get
			Return Me._ImageNM
		End Get
		Set
			If (String.Equals(Me._ImageNM, value) = false) Then
				Me._ImageNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageType", DbType:="NVarChar(255)")>  _
	Public Property ImageType() As String
		Get
			Return Me._ImageType
		End Get
		Set
			If (String.Equals(Me._ImageType, value) = false) Then
				Me._ImageType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionID", DbType:="Int NOT NULL")>  _
	Public Property CollectionID() As Integer
		Get
			Return Me._CollectionID
		End Get
		Set
			If ((Me._CollectionID = value)  _
						= false) Then
				Me._CollectionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateDS", DbType:="NVarChar(MAX)")>  _
	Public Property StateDS() As String
		Get
			Return Me._StateDS
		End Get
		Set
			If (String.Equals(Me._StateDS, value) = false) Then
				Me._StateDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateCD", DbType:="NVarChar(50)")>  _
	Public Property StateCD() As String
		Get
			Return Me._StateCD
		End Get
		Set
			If (String.Equals(Me._StateCD, value) = false) Then
				Me._StateCD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateNM", DbType:="NVarChar(255)")>  _
	Public Property StateNM() As String
		Get
			Return Me._StateNM
		End Get
		Set
			If (String.Equals(Me._StateNM, value) = false) Then
				Me._StateNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="NChar(10)")>  _
	Public Property Longitude() As String
		Get
			Return Me._Longitude
		End Get
		Set
			If (String.Equals(Me._Longitude, value) = false) Then
				Me._Longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="NChar(10)")>  _
	Public Property Latitude() As String
		Get
			Return Me._Latitude
		End Get
		Set
			If (String.Equals(Me._Latitude, value) = false) Then
				Me._Latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryDS", DbType:="NVarChar(MAX)")>  _
	Public Property CountryDS() As String
		Get
			Return Me._CountryDS
		End Get
		Set
			If (String.Equals(Me._CountryDS, value) = false) Then
				Me._CountryDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryNM", DbType:="NVarChar(255)")>  _
	Public Property CountryNM() As String
		Get
			Return Me._CountryNM
		End Get
		Set
			If (String.Equals(Me._CountryNM, value) = false) Then
				Me._CountryNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityDS", DbType:="NVarChar(MAX)")>  _
	Public Property CityDS() As String
		Get
			Return Me._CityDS
		End Get
		Set
			If (String.Equals(Me._CityDS, value) = false) Then
				Me._CityDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(255)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyDS", DbType:="NVarChar(MAX)")>  _
	Public Property CompanyDS() As String
		Get
			Return Me._CompanyDS
		End Get
		Set
			If (String.Equals(Me._CompanyDS, value) = false) Then
				Me._CompanyDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyNM", DbType:="NVarChar(255)")>  _
	Public Property CompanyNM() As String
		Get
			Return Me._CompanyNM
		End Get
		Set
			If (String.Equals(Me._CompanyNM, value) = false) Then
				Me._CompanyNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", DbType:="Int")>  _
	Public Property LocationCountryID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If (Me._LocationCountryID.Equals(value) = false) Then
				Me._LocationCountryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationStateID", DbType:="Int")>  _
	Public Property LocationStateID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationStateID
		End Get
		Set
			If (Me._LocationStateID.Equals(value) = false) Then
				Me._LocationStateID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCityID", DbType:="Int")>  _
	Public Property LocationCityID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCityID
		End Get
		Set
			If (Me._LocationCityID.Equals(value) = false) Then
				Me._LocationCityID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalePrice", DbType:="Money")>  _
	Public Property SalePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._SalePrice
		End Get
		Set
			If (Me._SalePrice.Equals(value) = false) Then
				Me._SalePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaleDT", DbType:="DateTime")>  _
	Public Property SaleDT() As System.Nullable(Of Date)
		Get
			Return Me._SaleDT
		End Get
		Set
			If (Me._SaleDT.Equals(value) = false) Then
				Me._SaleDT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightKg", DbType:="NVarChar(255)")>  _
	Public Property WeightKg() As String
		Get
			Return Me._WeightKg
		End Get
		Set
			If (String.Equals(Me._WeightKg, value) = false) Then
				Me._WeightKg = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightGr", DbType:="NVarChar(255)")>  _
	Public Property WeightGr() As String
		Get
			Return Me._WeightGr
		End Get
		Set
			If (String.Equals(Me._WeightGr, value) = false) Then
				Me._WeightGr = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThicknessIn", DbType:="Float")>  _
	Public Property ThicknessIn() As System.Nullable(Of Double)
		Get
			Return Me._ThicknessIn
		End Get
		Set
			If (Me._ThicknessIn.Equals(value) = false) Then
				Me._ThicknessIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidthIn", DbType:="Float")>  _
	Public Property WidthIn() As System.Nullable(Of Double)
		Get
			Return Me._WidthIn
		End Get
		Set
			If (Me._WidthIn.Equals(value) = false) Then
				Me._WidthIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeightIn", DbType:="Float")>  _
	Public Property HeightIn() As System.Nullable(Of Double)
		Get
			Return Me._HeightIn
		End Get
		Set
			If (Me._HeightIn.Equals(value) = false) Then
				Me._HeightIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThicknessCm", DbType:="Float")>  _
	Public Property ThicknessCm() As System.Nullable(Of Double)
		Get
			Return Me._ThicknessCm
		End Get
		Set
			If (Me._ThicknessCm.Equals(value) = false) Then
				Me._ThicknessCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidthCm", DbType:="Float")>  _
	Public Property WidthCm() As System.Nullable(Of Double)
		Get
			Return Me._WidthCm
		End Get
		Set
			If (Me._WidthCm.Equals(value) = false) Then
				Me._WidthCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeightCm", DbType:="Float")>  _
	Public Property HeightCm() As System.Nullable(Of Double)
		Get
			Return Me._HeightCm
		End Get
		Set
			If (Me._HeightCm.Equals(value) = false) Then
				Me._HeightCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExCollection", DbType:="NVarChar(255)")>  _
	Public Property ExCollection() As String
		Get
			Return Me._ExCollection
		End Get
		Set
			If (String.Equals(Me._ExCollection, value) = false) Then
				Me._ExCollection = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNotes", DbType:="NVarChar(MAX)")>  _
	Public Property SpecimenNotes() As String
		Get
			Return Me._SpecimenNotes
		End Get
		Set
			If (String.Equals(Me._SpecimenNotes, value) = false) Then
				Me._SpecimenNotes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StorageLocation", DbType:="NVarChar(255)")>  _
	Public Property StorageLocation() As String
		Get
			Return Me._StorageLocation
		End Get
		Set
			If (String.Equals(Me._StorageLocation, value) = false) Then
				Me._StorageLocation = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchasedFromCompanyID", DbType:="Int")>  _
	Public Property PurchasedFromCompanyID() As System.Nullable(Of Integer)
		Get
			Return Me._PurchasedFromCompanyID
		End Get
		Set
			If (Me._PurchasedFromCompanyID.Equals(value) = false) Then
				Me._PurchasedFromCompanyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowWherePurchased", DbType:="NVarChar(255)")>  _
	Public Property ShowWherePurchased() As String
		Get
			Return Me._ShowWherePurchased
		End Get
		Set
			If (String.Equals(Me._ShowWherePurchased, value) = false) Then
				Me._ShowWherePurchased = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Money")>  _
	Public Property Value() As System.Nullable(Of Decimal)
		Get
			Return Me._Value
		End Get
		Set
			If (Me._Value.Equals(value) = false) Then
				Me._Value = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchasePrice", DbType:="Money")>  _
	Public Property PurchasePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._PurchasePrice
		End Get
		Set
			If (Me._PurchasePrice.Equals(value) = false) Then
				Me._PurchasePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseDate", DbType:="DateTime")>  _
	Public Property PurchaseDate() As System.Nullable(Of Date)
		Get
			Return Me._PurchaseDate
		End Get
		Set
			If (Me._PurchaseDate.Equals(value) = false) Then
				Me._PurchaseDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineNM", DbType:="NVarChar(255)")>  _
	Public Property MineNM() As String
		Get
			Return Me._MineNM
		End Get
		Set
			If (String.Equals(Me._MineNM, value) = false) Then
				Me._MineNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemImageID", DbType:="Int")>  _
	Public Property CollectionItemImageID() As System.Nullable(Of Integer)
		Get
			Return Me._CollectionItemImageID
		End Get
		Set
			If (Me._CollectionItemImageID.Equals(value) = false) Then
				Me._CollectionItemImageID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayOrder", DbType:="Int")>  _
	Public Property DisplayOrder() As System.Nullable(Of Integer)
		Get
			Return Me._DisplayOrder
		End Get
		Set
			If (Me._DisplayOrder.Equals(value) = false) Then
				Me._DisplayOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryMineralID", DbType:="Int")>  _
	Public Property PrimaryMineralID() As System.Nullable(Of Integer)
		Get
			Return Me._PrimaryMineralID
		End Get
		Set
			If (Me._PrimaryMineralID.Equals(value) = false) Then
				Me._PrimaryMineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryMineralNM", DbType:="NVarChar(255)")>  _
	Public Property PrimaryMineralNM() As String
		Get
			Return Me._PrimaryMineralNM
		End Get
		Set
			If (String.Equals(Me._PrimaryMineralNM, value) = false) Then
				Me._PrimaryMineralNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryMineralDS", DbType:="NVarChar(MAX)")>  _
	Public Property PrimaryMineralDS() As String
		Get
			Return Me._PrimaryMineralDS
		End Get
		Set
			If (String.Equals(Me._PrimaryMineralDS, value) = false) Then
				Me._PrimaryMineralDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Position", DbType:="Int NOT NULL")>  _
	Public Property Position() As Integer
		Get
			Return Me._Position
		End Get
		Set
			If ((Me._Position = value)  _
						= false) Then
				Me._Position = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralID", DbType:="Int")>  _
	Public Property MineralID() As System.Nullable(Of Integer)
		Get
			Return Me._MineralID
		End Get
		Set
			If (Me._MineralID.Equals(value) = false) Then
				Me._MineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralNM", DbType:="NVarChar(255)")>  _
	Public Property MineralNM() As String
		Get
			Return Me._MineralNM
		End Get
		Set
			If (String.Equals(Me._MineralNM, value) = false) Then
				Me._MineralNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralDS", DbType:="NVarChar(MAX)")>  _
	Public Property MineralDS() As String
		Get
			Return Me._MineralDS
		End Get
		Set
			If (String.Equals(Me._MineralDS, value) = false) Then
				Me._MineralDS = value
			End If
		End Set
	End Property
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsSold", DbType:="Int NOT NULL")>
	Public Property IsSold() As Integer
		Get
			Return Me._IsSold
		End Get
		Set
			If ((Me._IsSold = Value) _
						= False) Then
				Me._IsSold = Value
			End If
		End Set
	End Property

	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsFeatured", DbType:="Int NOT NULL")>  _
	Public Property IsFeatured() As Integer
		Get
			Return Me._IsFeatured
		End Get
		Set
			If ((Me._IsFeatured = value)  _
						= false) Then
				Me._IsFeatured = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vwSpecimenImage")>  _
Partial Public Class vwSpecimenImage1
	
	Private _CollectionItemImageID As Integer
	
	Private _CollectionItemID As Integer
	
	Private _ImageType As String
	
	Private _DisplayOrder As Integer
	
	Private _ImageNM As String
	
	Private _ImageDS As String
	
	Private _ImageFileNM As String
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemImageID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property CollectionItemImageID() As Integer
		Get
			Return Me._CollectionItemImageID
		End Get
		Set
			If ((Me._CollectionItemImageID = value)  _
						= false) Then
				Me._CollectionItemImageID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageType", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageType() As String
		Get
			Return Me._ImageType
		End Get
		Set
			If (String.Equals(Me._ImageType, value) = false) Then
				Me._ImageType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayOrder", DbType:="Int NOT NULL")>  _
	Public Property DisplayOrder() As Integer
		Get
			Return Me._DisplayOrder
		End Get
		Set
			If ((Me._DisplayOrder = value)  _
						= false) Then
				Me._DisplayOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageNM() As String
		Get
			Return Me._ImageNM
		End Get
		Set
			If (String.Equals(Me._ImageNM, value) = false) Then
				Me._ImageNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageDS", DbType:="NVarChar(MAX)")>  _
	Public Property ImageDS() As String
		Get
			Return Me._ImageDS
		End Get
		Set
			If (String.Equals(Me._ImageDS, value) = false) Then
				Me._ImageDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageFileNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageFileNM() As String
		Get
			Return Me._ImageFileNM
		End Get
		Set
			If (String.Equals(Me._ImageFileNM, value) = false) Then
				Me._ImageFileNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_RelatedCollectionItem_SelectByMineralIDResult
	
	Private _CollectionItemID As Integer
	
	Private _SpecimenNumber As Double
	
	Private _Nickname As String
	
	Private _CollectionID As Integer
	
	Private _Description As String
	
	Private _MineralID As System.Nullable(Of Integer)
	
	Private _MineralNM As String
	
	Private _ImageFileNM As String
	
	Private _DisplayOrder As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNumber", DbType:="Float NOT NULL")>  _
	Public Property SpecimenNumber() As Double
		Get
			Return Me._SpecimenNumber
		End Get
		Set
			If ((Me._SpecimenNumber = value)  _
						= false) Then
				Me._SpecimenNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nickname", DbType:="NVarChar(255)")>  _
	Public Property Nickname() As String
		Get
			Return Me._Nickname
		End Get
		Set
			If (String.Equals(Me._Nickname, value) = false) Then
				Me._Nickname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionID", DbType:="Int NOT NULL")>  _
	Public Property CollectionID() As Integer
		Get
			Return Me._CollectionID
		End Get
		Set
			If ((Me._CollectionID = value)  _
						= false) Then
				Me._CollectionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralID", DbType:="Int")>  _
	Public Property MineralID() As System.Nullable(Of Integer)
		Get
			Return Me._MineralID
		End Get
		Set
			If (Me._MineralID.Equals(value) = false) Then
				Me._MineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralNM", DbType:="NVarChar(255)")>  _
	Public Property MineralNM() As String
		Get
			Return Me._MineralNM
		End Get
		Set
			If (String.Equals(Me._MineralNM, value) = false) Then
				Me._MineralNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageFileNM", DbType:="NVarChar(255)")>  _
	Public Property ImageFileNM() As String
		Get
			Return Me._ImageFileNM
		End Get
		Set
			If (String.Equals(Me._ImageFileNM, value) = false) Then
				Me._ImageFileNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayOrder", DbType:="Int NOT NULL")>  _
	Public Property DisplayOrder() As Integer
		Get
			Return Me._DisplayOrder
		End Get
		Set
			If ((Me._DisplayOrder = value)  _
						= false) Then
				Me._DisplayOrder = value
			End If
		End Set
	End Property
End Class

Partial Public Class usp_RelatedCollectionItem_SelectByCollectionItemIDResult
	
	Private _CollectionItemID As Integer
	
	Private _SpecimenNumber As Double
	
	Private _Nickname As String
	
	Private _CollectionID As Integer
	
	Private _Description As String
	
	Private _MineralID As System.Nullable(Of Integer)
	
	Private _MineralNM As String
	
	Private _ImageFileNM As String
	
	Private _DisplayOrder As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNumber", DbType:="Float NOT NULL")>  _
	Public Property SpecimenNumber() As Double
		Get
			Return Me._SpecimenNumber
		End Get
		Set
			If ((Me._SpecimenNumber = value)  _
						= false) Then
				Me._SpecimenNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nickname", DbType:="NVarChar(255)")>  _
	Public Property Nickname() As String
		Get
			Return Me._Nickname
		End Get
		Set
			If (String.Equals(Me._Nickname, value) = false) Then
				Me._Nickname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionID", DbType:="Int NOT NULL")>  _
	Public Property CollectionID() As Integer
		Get
			Return Me._CollectionID
		End Get
		Set
			If ((Me._CollectionID = value)  _
						= false) Then
				Me._CollectionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralID", DbType:="Int")>  _
	Public Property MineralID() As System.Nullable(Of Integer)
		Get
			Return Me._MineralID
		End Get
		Set
			If (Me._MineralID.Equals(value) = false) Then
				Me._MineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralNM", DbType:="NVarChar(255)")>  _
	Public Property MineralNM() As String
		Get
			Return Me._MineralNM
		End Get
		Set
			If (String.Equals(Me._MineralNM, value) = false) Then
				Me._MineralNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageFileNM", DbType:="NVarChar(255)")>  _
	Public Property ImageFileNM() As String
		Get
			Return Me._ImageFileNM
		End Get
		Set
			If (String.Equals(Me._ImageFileNM, value) = false) Then
				Me._ImageFileNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayOrder", DbType:="Int NOT NULL")>  _
	Public Property DisplayOrder() As Integer
		Get
			Return Me._DisplayOrder
		End Get
		Set
			If ((Me._DisplayOrder = value)  _
						= false) Then
				Me._DisplayOrder = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_Collection_InsertResult
	
	Private _CollectionID As Integer
	
	Private _CollectionNM As String
	
	Private _CollectionDS As String
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionID", DbType:="Int NOT NULL")>  _
	Public Property CollectionID() As Integer
		Get
			Return Me._CollectionID
		End Get
		Set
			If ((Me._CollectionID = value)  _
						= false) Then
				Me._CollectionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property CollectionNM() As String
		Get
			Return Me._CollectionNM
		End Get
		Set
			If (String.Equals(Me._CollectionNM, value) = false) Then
				Me._CollectionNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionDS", DbType:="NVarChar(MAX)")>  _
	Public Property CollectionDS() As String
		Get
			Return Me._CollectionDS
		End Get
		Set
			If (String.Equals(Me._CollectionDS, value) = false) Then
				Me._CollectionDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_Collection_SelectResult
	
	Private _CollectionID As Integer
	
	Private _CollectionNM As String
	
	Private _CollectionDS As String
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionID", DbType:="Int NOT NULL")>  _
	Public Property CollectionID() As Integer
		Get
			Return Me._CollectionID
		End Get
		Set
			If ((Me._CollectionID = value)  _
						= false) Then
				Me._CollectionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property CollectionNM() As String
		Get
			Return Me._CollectionNM
		End Get
		Set
			If (String.Equals(Me._CollectionNM, value) = false) Then
				Me._CollectionNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionDS", DbType:="NVarChar(MAX)")>  _
	Public Property CollectionDS() As String
		Get
			Return Me._CollectionDS
		End Get
		Set
			If (String.Equals(Me._CollectionDS, value) = false) Then
				Me._CollectionDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_Collection_UpdateResult
	
	Private _CollectionID As Integer
	
	Private _CollectionNM As String
	
	Private _CollectionDS As String
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionID", DbType:="Int NOT NULL")>  _
	Public Property CollectionID() As Integer
		Get
			Return Me._CollectionID
		End Get
		Set
			If ((Me._CollectionID = value)  _
						= false) Then
				Me._CollectionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property CollectionNM() As String
		Get
			Return Me._CollectionNM
		End Get
		Set
			If (String.Equals(Me._CollectionNM, value) = false) Then
				Me._CollectionNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionDS", DbType:="NVarChar(MAX)")>  _
	Public Property CollectionDS() As String
		Get
			Return Me._CollectionDS
		End Get
		Set
			If (String.Equals(Me._CollectionDS, value) = false) Then
				Me._CollectionDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_CollectionItem_InsertResult
	
	Private _CollectionItemID As Integer
	
	Private _CollectionID As Integer
	
	Private _SpecimenNumber As Double
	
	Private _Nickname As String
	
	Private _PrimaryMineralID As System.Nullable(Of Integer)
	
	Private _MineralVariety As String
	
	Private _MineNM As String
	
	Private _PurchaseDate As System.Nullable(Of Date)
	
	Private _PurchasePrice As System.Nullable(Of Decimal)
	
	Private _Value As System.Nullable(Of Decimal)
	
	Private _ShowWherePurchased As String
	
	Private _PurchasedFromCompanyID As System.Nullable(Of Integer)
	
	Private _StorageLocation As String
	
	Private _SpecimenNotes As String
	
	Private _Description As String
	
	Private _ExCollection As String
	
	Private _HeightCm As System.Nullable(Of Double)
	
	Private _WidthCm As System.Nullable(Of Double)
	
	Private _ThicknessCm As System.Nullable(Of Double)
	
	Private _HeightIn As System.Nullable(Of Double)
	
	Private _WidthIn As System.Nullable(Of Double)
	
	Private _ThicknessIn As System.Nullable(Of Double)
	
	Private _WeightGr As String
	
	Private _WeightKg As String
	
	Private _SaleDT As System.Nullable(Of Date)
	
	Private _SalePrice As System.Nullable(Of Decimal)
	
	Private _LocationCityID As System.Nullable(Of Integer)
	
	Private _LocationStateID As System.Nullable(Of Integer)
	
	Private _LocationCountryID As System.Nullable(Of Integer)
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Private _IsFeatured As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionID", DbType:="Int NOT NULL")>  _
	Public Property CollectionID() As Integer
		Get
			Return Me._CollectionID
		End Get
		Set
			If ((Me._CollectionID = value)  _
						= false) Then
				Me._CollectionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNumber", DbType:="Float NOT NULL")>  _
	Public Property SpecimenNumber() As Double
		Get
			Return Me._SpecimenNumber
		End Get
		Set
			If ((Me._SpecimenNumber = value)  _
						= false) Then
				Me._SpecimenNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nickname", DbType:="NVarChar(255)")>  _
	Public Property Nickname() As String
		Get
			Return Me._Nickname
		End Get
		Set
			If (String.Equals(Me._Nickname, value) = false) Then
				Me._Nickname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryMineralID", DbType:="Int")>  _
	Public Property PrimaryMineralID() As System.Nullable(Of Integer)
		Get
			Return Me._PrimaryMineralID
		End Get
		Set
			If (Me._PrimaryMineralID.Equals(value) = false) Then
				Me._PrimaryMineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralVariety", DbType:="NVarChar(255)")>  _
	Public Property MineralVariety() As String
		Get
			Return Me._MineralVariety
		End Get
		Set
			If (String.Equals(Me._MineralVariety, value) = false) Then
				Me._MineralVariety = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineNM", DbType:="NVarChar(255)")>  _
	Public Property MineNM() As String
		Get
			Return Me._MineNM
		End Get
		Set
			If (String.Equals(Me._MineNM, value) = false) Then
				Me._MineNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseDate", DbType:="DateTime")>  _
	Public Property PurchaseDate() As System.Nullable(Of Date)
		Get
			Return Me._PurchaseDate
		End Get
		Set
			If (Me._PurchaseDate.Equals(value) = false) Then
				Me._PurchaseDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchasePrice", DbType:="Money")>  _
	Public Property PurchasePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._PurchasePrice
		End Get
		Set
			If (Me._PurchasePrice.Equals(value) = false) Then
				Me._PurchasePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Money")>  _
	Public Property Value() As System.Nullable(Of Decimal)
		Get
			Return Me._Value
		End Get
		Set
			If (Me._Value.Equals(value) = false) Then
				Me._Value = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowWherePurchased", DbType:="NVarChar(255)")>  _
	Public Property ShowWherePurchased() As String
		Get
			Return Me._ShowWherePurchased
		End Get
		Set
			If (String.Equals(Me._ShowWherePurchased, value) = false) Then
				Me._ShowWherePurchased = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchasedFromCompanyID", DbType:="Int")>  _
	Public Property PurchasedFromCompanyID() As System.Nullable(Of Integer)
		Get
			Return Me._PurchasedFromCompanyID
		End Get
		Set
			If (Me._PurchasedFromCompanyID.Equals(value) = false) Then
				Me._PurchasedFromCompanyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StorageLocation", DbType:="NVarChar(255)")>  _
	Public Property StorageLocation() As String
		Get
			Return Me._StorageLocation
		End Get
		Set
			If (String.Equals(Me._StorageLocation, value) = false) Then
				Me._StorageLocation = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNotes", DbType:="NVarChar(MAX)")>  _
	Public Property SpecimenNotes() As String
		Get
			Return Me._SpecimenNotes
		End Get
		Set
			If (String.Equals(Me._SpecimenNotes, value) = false) Then
				Me._SpecimenNotes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExCollection", DbType:="NVarChar(255)")>  _
	Public Property ExCollection() As String
		Get
			Return Me._ExCollection
		End Get
		Set
			If (String.Equals(Me._ExCollection, value) = false) Then
				Me._ExCollection = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeightCm", DbType:="Float")>  _
	Public Property HeightCm() As System.Nullable(Of Double)
		Get
			Return Me._HeightCm
		End Get
		Set
			If (Me._HeightCm.Equals(value) = false) Then
				Me._HeightCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidthCm", DbType:="Float")>  _
	Public Property WidthCm() As System.Nullable(Of Double)
		Get
			Return Me._WidthCm
		End Get
		Set
			If (Me._WidthCm.Equals(value) = false) Then
				Me._WidthCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThicknessCm", DbType:="Float")>  _
	Public Property ThicknessCm() As System.Nullable(Of Double)
		Get
			Return Me._ThicknessCm
		End Get
		Set
			If (Me._ThicknessCm.Equals(value) = false) Then
				Me._ThicknessCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeightIn", DbType:="Float")>  _
	Public Property HeightIn() As System.Nullable(Of Double)
		Get
			Return Me._HeightIn
		End Get
		Set
			If (Me._HeightIn.Equals(value) = false) Then
				Me._HeightIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidthIn", DbType:="Float")>  _
	Public Property WidthIn() As System.Nullable(Of Double)
		Get
			Return Me._WidthIn
		End Get
		Set
			If (Me._WidthIn.Equals(value) = false) Then
				Me._WidthIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThicknessIn", DbType:="Float")>  _
	Public Property ThicknessIn() As System.Nullable(Of Double)
		Get
			Return Me._ThicknessIn
		End Get
		Set
			If (Me._ThicknessIn.Equals(value) = false) Then
				Me._ThicknessIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightGr", DbType:="NVarChar(255)")>  _
	Public Property WeightGr() As String
		Get
			Return Me._WeightGr
		End Get
		Set
			If (String.Equals(Me._WeightGr, value) = false) Then
				Me._WeightGr = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightKg", DbType:="NVarChar(255)")>  _
	Public Property WeightKg() As String
		Get
			Return Me._WeightKg
		End Get
		Set
			If (String.Equals(Me._WeightKg, value) = false) Then
				Me._WeightKg = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaleDT", DbType:="DateTime")>  _
	Public Property SaleDT() As System.Nullable(Of Date)
		Get
			Return Me._SaleDT
		End Get
		Set
			If (Me._SaleDT.Equals(value) = false) Then
				Me._SaleDT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalePrice", DbType:="Money")>  _
	Public Property SalePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._SalePrice
		End Get
		Set
			If (Me._SalePrice.Equals(value) = false) Then
				Me._SalePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCityID", DbType:="Int")>  _
	Public Property LocationCityID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCityID
		End Get
		Set
			If (Me._LocationCityID.Equals(value) = false) Then
				Me._LocationCityID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationStateID", DbType:="Int")>  _
	Public Property LocationStateID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationStateID
		End Get
		Set
			If (Me._LocationStateID.Equals(value) = false) Then
				Me._LocationStateID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", DbType:="Int")>  _
	Public Property LocationCountryID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If (Me._LocationCountryID.Equals(value) = false) Then
				Me._LocationCountryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsFeatured", DbType:="Int NOT NULL")>  _
	Public Property IsFeatured() As Integer
		Get
			Return Me._IsFeatured
		End Get
		Set
			If ((Me._IsFeatured = value)  _
						= false) Then
				Me._IsFeatured = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_CollectionItem_SelectResult
	
	Private _CollectionItemID As Integer
	
	Private _CollectionID As Integer
	
	Private _SpecimenNumber As Double
	
	Private _Nickname As String
	
	Private _PrimaryMineralID As System.Nullable(Of Integer)
	
	Private _MineralVariety As String
	
	Private _MineNM As String
	
	Private _PurchaseDate As System.Nullable(Of Date)
	
	Private _PurchasePrice As System.Nullable(Of Decimal)
	
	Private _Value As System.Nullable(Of Decimal)
	
	Private _ShowWherePurchased As String
	
	Private _PurchasedFromCompanyID As System.Nullable(Of Integer)
	
	Private _StorageLocation As String
	
	Private _SpecimenNotes As String
	
	Private _Description As String
	
	Private _ExCollection As String
	
	Private _HeightCm As System.Nullable(Of Double)
	
	Private _WidthCm As System.Nullable(Of Double)
	
	Private _ThicknessCm As System.Nullable(Of Double)
	
	Private _HeightIn As System.Nullable(Of Double)
	
	Private _WidthIn As System.Nullable(Of Double)
	
	Private _ThicknessIn As System.Nullable(Of Double)
	
	Private _WeightGr As String
	
	Private _WeightKg As String
	
	Private _SaleDT As System.Nullable(Of Date)
	
	Private _SalePrice As System.Nullable(Of Decimal)
	
	Private _LocationCityID As System.Nullable(Of Integer)
	
	Private _LocationStateID As System.Nullable(Of Integer)
	
	Private _LocationCountryID As System.Nullable(Of Integer)
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Private _IsFeatured As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionID", DbType:="Int NOT NULL")>  _
	Public Property CollectionID() As Integer
		Get
			Return Me._CollectionID
		End Get
		Set
			If ((Me._CollectionID = value)  _
						= false) Then
				Me._CollectionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNumber", DbType:="Float NOT NULL")>  _
	Public Property SpecimenNumber() As Double
		Get
			Return Me._SpecimenNumber
		End Get
		Set
			If ((Me._SpecimenNumber = value)  _
						= false) Then
				Me._SpecimenNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nickname", DbType:="NVarChar(255)")>  _
	Public Property Nickname() As String
		Get
			Return Me._Nickname
		End Get
		Set
			If (String.Equals(Me._Nickname, value) = false) Then
				Me._Nickname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryMineralID", DbType:="Int")>  _
	Public Property PrimaryMineralID() As System.Nullable(Of Integer)
		Get
			Return Me._PrimaryMineralID
		End Get
		Set
			If (Me._PrimaryMineralID.Equals(value) = false) Then
				Me._PrimaryMineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralVariety", DbType:="NVarChar(255)")>  _
	Public Property MineralVariety() As String
		Get
			Return Me._MineralVariety
		End Get
		Set
			If (String.Equals(Me._MineralVariety, value) = false) Then
				Me._MineralVariety = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineNM", DbType:="NVarChar(255)")>  _
	Public Property MineNM() As String
		Get
			Return Me._MineNM
		End Get
		Set
			If (String.Equals(Me._MineNM, value) = false) Then
				Me._MineNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseDate", DbType:="DateTime")>  _
	Public Property PurchaseDate() As System.Nullable(Of Date)
		Get
			Return Me._PurchaseDate
		End Get
		Set
			If (Me._PurchaseDate.Equals(value) = false) Then
				Me._PurchaseDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchasePrice", DbType:="Money")>  _
	Public Property PurchasePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._PurchasePrice
		End Get
		Set
			If (Me._PurchasePrice.Equals(value) = false) Then
				Me._PurchasePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Money")>  _
	Public Property Value() As System.Nullable(Of Decimal)
		Get
			Return Me._Value
		End Get
		Set
			If (Me._Value.Equals(value) = false) Then
				Me._Value = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowWherePurchased", DbType:="NVarChar(255)")>  _
	Public Property ShowWherePurchased() As String
		Get
			Return Me._ShowWherePurchased
		End Get
		Set
			If (String.Equals(Me._ShowWherePurchased, value) = false) Then
				Me._ShowWherePurchased = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchasedFromCompanyID", DbType:="Int")>  _
	Public Property PurchasedFromCompanyID() As System.Nullable(Of Integer)
		Get
			Return Me._PurchasedFromCompanyID
		End Get
		Set
			If (Me._PurchasedFromCompanyID.Equals(value) = false) Then
				Me._PurchasedFromCompanyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StorageLocation", DbType:="NVarChar(255)")>  _
	Public Property StorageLocation() As String
		Get
			Return Me._StorageLocation
		End Get
		Set
			If (String.Equals(Me._StorageLocation, value) = false) Then
				Me._StorageLocation = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNotes", DbType:="NVarChar(MAX)")>  _
	Public Property SpecimenNotes() As String
		Get
			Return Me._SpecimenNotes
		End Get
		Set
			If (String.Equals(Me._SpecimenNotes, value) = false) Then
				Me._SpecimenNotes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExCollection", DbType:="NVarChar(255)")>  _
	Public Property ExCollection() As String
		Get
			Return Me._ExCollection
		End Get
		Set
			If (String.Equals(Me._ExCollection, value) = false) Then
				Me._ExCollection = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeightCm", DbType:="Float")>  _
	Public Property HeightCm() As System.Nullable(Of Double)
		Get
			Return Me._HeightCm
		End Get
		Set
			If (Me._HeightCm.Equals(value) = false) Then
				Me._HeightCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidthCm", DbType:="Float")>  _
	Public Property WidthCm() As System.Nullable(Of Double)
		Get
			Return Me._WidthCm
		End Get
		Set
			If (Me._WidthCm.Equals(value) = false) Then
				Me._WidthCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThicknessCm", DbType:="Float")>  _
	Public Property ThicknessCm() As System.Nullable(Of Double)
		Get
			Return Me._ThicknessCm
		End Get
		Set
			If (Me._ThicknessCm.Equals(value) = false) Then
				Me._ThicknessCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeightIn", DbType:="Float")>  _
	Public Property HeightIn() As System.Nullable(Of Double)
		Get
			Return Me._HeightIn
		End Get
		Set
			If (Me._HeightIn.Equals(value) = false) Then
				Me._HeightIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidthIn", DbType:="Float")>  _
	Public Property WidthIn() As System.Nullable(Of Double)
		Get
			Return Me._WidthIn
		End Get
		Set
			If (Me._WidthIn.Equals(value) = false) Then
				Me._WidthIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThicknessIn", DbType:="Float")>  _
	Public Property ThicknessIn() As System.Nullable(Of Double)
		Get
			Return Me._ThicknessIn
		End Get
		Set
			If (Me._ThicknessIn.Equals(value) = false) Then
				Me._ThicknessIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightGr", DbType:="NVarChar(255)")>  _
	Public Property WeightGr() As String
		Get
			Return Me._WeightGr
		End Get
		Set
			If (String.Equals(Me._WeightGr, value) = false) Then
				Me._WeightGr = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightKg", DbType:="NVarChar(255)")>  _
	Public Property WeightKg() As String
		Get
			Return Me._WeightKg
		End Get
		Set
			If (String.Equals(Me._WeightKg, value) = false) Then
				Me._WeightKg = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaleDT", DbType:="DateTime")>  _
	Public Property SaleDT() As System.Nullable(Of Date)
		Get
			Return Me._SaleDT
		End Get
		Set
			If (Me._SaleDT.Equals(value) = false) Then
				Me._SaleDT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalePrice", DbType:="Money")>  _
	Public Property SalePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._SalePrice
		End Get
		Set
			If (Me._SalePrice.Equals(value) = false) Then
				Me._SalePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCityID", DbType:="Int")>  _
	Public Property LocationCityID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCityID
		End Get
		Set
			If (Me._LocationCityID.Equals(value) = false) Then
				Me._LocationCityID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationStateID", DbType:="Int")>  _
	Public Property LocationStateID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationStateID
		End Get
		Set
			If (Me._LocationStateID.Equals(value) = false) Then
				Me._LocationStateID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", DbType:="Int")>  _
	Public Property LocationCountryID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If (Me._LocationCountryID.Equals(value) = false) Then
				Me._LocationCountryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsFeatured", DbType:="Int NOT NULL")>  _
	Public Property IsFeatured() As Integer
		Get
			Return Me._IsFeatured
		End Get
		Set
			If ((Me._IsFeatured = value)  _
						= false) Then
				Me._IsFeatured = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_CollectionItem_UpdateResult
	
	Private _CollectionItemID As Integer
	
	Private _CollectionID As Integer
	
	Private _SpecimenNumber As Double
	
	Private _Nickname As String
	
	Private _PrimaryMineralID As System.Nullable(Of Integer)
	
	Private _MineralVariety As String
	
	Private _MineNM As String
	
	Private _PurchaseDate As System.Nullable(Of Date)
	
	Private _PurchasePrice As System.Nullable(Of Decimal)
	
	Private _Value As System.Nullable(Of Decimal)
	
	Private _ShowWherePurchased As String
	
	Private _PurchasedFromCompanyID As System.Nullable(Of Integer)
	
	Private _StorageLocation As String
	
	Private _SpecimenNotes As String
	
	Private _Description As String
	
	Private _ExCollection As String
	
	Private _HeightCm As System.Nullable(Of Double)
	
	Private _WidthCm As System.Nullable(Of Double)
	
	Private _ThicknessCm As System.Nullable(Of Double)
	
	Private _HeightIn As System.Nullable(Of Double)
	
	Private _WidthIn As System.Nullable(Of Double)
	
	Private _ThicknessIn As System.Nullable(Of Double)
	
	Private _WeightGr As String
	
	Private _WeightKg As String
	
	Private _SaleDT As System.Nullable(Of Date)
	
	Private _SalePrice As System.Nullable(Of Decimal)
	
	Private _LocationCityID As System.Nullable(Of Integer)
	
	Private _LocationStateID As System.Nullable(Of Integer)
	
	Private _LocationCountryID As System.Nullable(Of Integer)
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Private _IsFeatured As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionID", DbType:="Int NOT NULL")>  _
	Public Property CollectionID() As Integer
		Get
			Return Me._CollectionID
		End Get
		Set
			If ((Me._CollectionID = value)  _
						= false) Then
				Me._CollectionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNumber", DbType:="Float NOT NULL")>  _
	Public Property SpecimenNumber() As Double
		Get
			Return Me._SpecimenNumber
		End Get
		Set
			If ((Me._SpecimenNumber = value)  _
						= false) Then
				Me._SpecimenNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nickname", DbType:="NVarChar(255)")>  _
	Public Property Nickname() As String
		Get
			Return Me._Nickname
		End Get
		Set
			If (String.Equals(Me._Nickname, value) = false) Then
				Me._Nickname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryMineralID", DbType:="Int")>  _
	Public Property PrimaryMineralID() As System.Nullable(Of Integer)
		Get
			Return Me._PrimaryMineralID
		End Get
		Set
			If (Me._PrimaryMineralID.Equals(value) = false) Then
				Me._PrimaryMineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralVariety", DbType:="NVarChar(255)")>  _
	Public Property MineralVariety() As String
		Get
			Return Me._MineralVariety
		End Get
		Set
			If (String.Equals(Me._MineralVariety, value) = false) Then
				Me._MineralVariety = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineNM", DbType:="NVarChar(255)")>  _
	Public Property MineNM() As String
		Get
			Return Me._MineNM
		End Get
		Set
			If (String.Equals(Me._MineNM, value) = false) Then
				Me._MineNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchaseDate", DbType:="DateTime")>  _
	Public Property PurchaseDate() As System.Nullable(Of Date)
		Get
			Return Me._PurchaseDate
		End Get
		Set
			If (Me._PurchaseDate.Equals(value) = false) Then
				Me._PurchaseDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchasePrice", DbType:="Money")>  _
	Public Property PurchasePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._PurchasePrice
		End Get
		Set
			If (Me._PurchasePrice.Equals(value) = false) Then
				Me._PurchasePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Money")>  _
	Public Property Value() As System.Nullable(Of Decimal)
		Get
			Return Me._Value
		End Get
		Set
			If (Me._Value.Equals(value) = false) Then
				Me._Value = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShowWherePurchased", DbType:="NVarChar(255)")>  _
	Public Property ShowWherePurchased() As String
		Get
			Return Me._ShowWherePurchased
		End Get
		Set
			If (String.Equals(Me._ShowWherePurchased, value) = false) Then
				Me._ShowWherePurchased = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PurchasedFromCompanyID", DbType:="Int")>  _
	Public Property PurchasedFromCompanyID() As System.Nullable(Of Integer)
		Get
			Return Me._PurchasedFromCompanyID
		End Get
		Set
			If (Me._PurchasedFromCompanyID.Equals(value) = false) Then
				Me._PurchasedFromCompanyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StorageLocation", DbType:="NVarChar(255)")>  _
	Public Property StorageLocation() As String
		Get
			Return Me._StorageLocation
		End Get
		Set
			If (String.Equals(Me._StorageLocation, value) = false) Then
				Me._StorageLocation = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecimenNotes", DbType:="NVarChar(MAX)")>  _
	Public Property SpecimenNotes() As String
		Get
			Return Me._SpecimenNotes
		End Get
		Set
			If (String.Equals(Me._SpecimenNotes, value) = false) Then
				Me._SpecimenNotes = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExCollection", DbType:="NVarChar(255)")>  _
	Public Property ExCollection() As String
		Get
			Return Me._ExCollection
		End Get
		Set
			If (String.Equals(Me._ExCollection, value) = false) Then
				Me._ExCollection = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeightCm", DbType:="Float")>  _
	Public Property HeightCm() As System.Nullable(Of Double)
		Get
			Return Me._HeightCm
		End Get
		Set
			If (Me._HeightCm.Equals(value) = false) Then
				Me._HeightCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidthCm", DbType:="Float")>  _
	Public Property WidthCm() As System.Nullable(Of Double)
		Get
			Return Me._WidthCm
		End Get
		Set
			If (Me._WidthCm.Equals(value) = false) Then
				Me._WidthCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThicknessCm", DbType:="Float")>  _
	Public Property ThicknessCm() As System.Nullable(Of Double)
		Get
			Return Me._ThicknessCm
		End Get
		Set
			If (Me._ThicknessCm.Equals(value) = false) Then
				Me._ThicknessCm = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HeightIn", DbType:="Float")>  _
	Public Property HeightIn() As System.Nullable(Of Double)
		Get
			Return Me._HeightIn
		End Get
		Set
			If (Me._HeightIn.Equals(value) = false) Then
				Me._HeightIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WidthIn", DbType:="Float")>  _
	Public Property WidthIn() As System.Nullable(Of Double)
		Get
			Return Me._WidthIn
		End Get
		Set
			If (Me._WidthIn.Equals(value) = false) Then
				Me._WidthIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThicknessIn", DbType:="Float")>  _
	Public Property ThicknessIn() As System.Nullable(Of Double)
		Get
			Return Me._ThicknessIn
		End Get
		Set
			If (Me._ThicknessIn.Equals(value) = false) Then
				Me._ThicknessIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightGr", DbType:="NVarChar(255)")>  _
	Public Property WeightGr() As String
		Get
			Return Me._WeightGr
		End Get
		Set
			If (String.Equals(Me._WeightGr, value) = false) Then
				Me._WeightGr = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightKg", DbType:="NVarChar(255)")>  _
	Public Property WeightKg() As String
		Get
			Return Me._WeightKg
		End Get
		Set
			If (String.Equals(Me._WeightKg, value) = false) Then
				Me._WeightKg = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SaleDT", DbType:="DateTime")>  _
	Public Property SaleDT() As System.Nullable(Of Date)
		Get
			Return Me._SaleDT
		End Get
		Set
			If (Me._SaleDT.Equals(value) = false) Then
				Me._SaleDT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalePrice", DbType:="Money")>  _
	Public Property SalePrice() As System.Nullable(Of Decimal)
		Get
			Return Me._SalePrice
		End Get
		Set
			If (Me._SalePrice.Equals(value) = false) Then
				Me._SalePrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCityID", DbType:="Int")>  _
	Public Property LocationCityID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCityID
		End Get
		Set
			If (Me._LocationCityID.Equals(value) = false) Then
				Me._LocationCityID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationStateID", DbType:="Int")>  _
	Public Property LocationStateID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationStateID
		End Get
		Set
			If (Me._LocationStateID.Equals(value) = false) Then
				Me._LocationStateID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", DbType:="Int")>  _
	Public Property LocationCountryID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If (Me._LocationCountryID.Equals(value) = false) Then
				Me._LocationCountryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsFeatured", DbType:="Int NOT NULL")>  _
	Public Property IsFeatured() As Integer
		Get
			Return Me._IsFeatured
		End Get
		Set
			If ((Me._IsFeatured = value)  _
						= false) Then
				Me._IsFeatured = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_CollectionItemImage_InsertResult
	
	Private _CollectionItemImageID As Integer
	
	Private _CollectionItemID As Integer
	
	Private _ImageType As String
	
	Private _DisplayOrder As Integer
	
	Private _ImageNM As String
	
	Private _ImageDS As String
	
	Private _ImageFileNM As String
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemImageID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemImageID() As Integer
		Get
			Return Me._CollectionItemImageID
		End Get
		Set
			If ((Me._CollectionItemImageID = value)  _
						= false) Then
				Me._CollectionItemImageID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageType", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageType() As String
		Get
			Return Me._ImageType
		End Get
		Set
			If (String.Equals(Me._ImageType, value) = false) Then
				Me._ImageType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayOrder", DbType:="Int NOT NULL")>  _
	Public Property DisplayOrder() As Integer
		Get
			Return Me._DisplayOrder
		End Get
		Set
			If ((Me._DisplayOrder = value)  _
						= false) Then
				Me._DisplayOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageNM() As String
		Get
			Return Me._ImageNM
		End Get
		Set
			If (String.Equals(Me._ImageNM, value) = false) Then
				Me._ImageNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageDS", DbType:="NVarChar(MAX)")>  _
	Public Property ImageDS() As String
		Get
			Return Me._ImageDS
		End Get
		Set
			If (String.Equals(Me._ImageDS, value) = false) Then
				Me._ImageDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageFileNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageFileNM() As String
		Get
			Return Me._ImageFileNM
		End Get
		Set
			If (String.Equals(Me._ImageFileNM, value) = false) Then
				Me._ImageFileNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_CollectionItemImage_SelectResult
	
	Private _CollectionItemImageID As Integer
	
	Private _CollectionItemID As Integer
	
	Private _ImageType As String
	
	Private _DisplayOrder As Integer
	
	Private _ImageNM As String
	
	Private _ImageDS As String
	
	Private _ImageFileNM As String
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemImageID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemImageID() As Integer
		Get
			Return Me._CollectionItemImageID
		End Get
		Set
			If ((Me._CollectionItemImageID = value)  _
						= false) Then
				Me._CollectionItemImageID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageType", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageType() As String
		Get
			Return Me._ImageType
		End Get
		Set
			If (String.Equals(Me._ImageType, value) = false) Then
				Me._ImageType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayOrder", DbType:="Int NOT NULL")>  _
	Public Property DisplayOrder() As Integer
		Get
			Return Me._DisplayOrder
		End Get
		Set
			If ((Me._DisplayOrder = value)  _
						= false) Then
				Me._DisplayOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageNM() As String
		Get
			Return Me._ImageNM
		End Get
		Set
			If (String.Equals(Me._ImageNM, value) = false) Then
				Me._ImageNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageDS", DbType:="NVarChar(MAX)")>  _
	Public Property ImageDS() As String
		Get
			Return Me._ImageDS
		End Get
		Set
			If (String.Equals(Me._ImageDS, value) = false) Then
				Me._ImageDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageFileNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageFileNM() As String
		Get
			Return Me._ImageFileNM
		End Get
		Set
			If (String.Equals(Me._ImageFileNM, value) = false) Then
				Me._ImageFileNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_CollectionItemImage_UpdateResult
	
	Private _CollectionItemImageID As Integer
	
	Private _CollectionItemID As Integer
	
	Private _ImageType As String
	
	Private _DisplayOrder As Integer
	
	Private _ImageNM As String
	
	Private _ImageDS As String
	
	Private _ImageFileNM As String
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemImageID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemImageID() As Integer
		Get
			Return Me._CollectionItemImageID
		End Get
		Set
			If ((Me._CollectionItemImageID = value)  _
						= false) Then
				Me._CollectionItemImageID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageType", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageType() As String
		Get
			Return Me._ImageType
		End Get
		Set
			If (String.Equals(Me._ImageType, value) = false) Then
				Me._ImageType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayOrder", DbType:="Int NOT NULL")>  _
	Public Property DisplayOrder() As Integer
		Get
			Return Me._DisplayOrder
		End Get
		Set
			If ((Me._DisplayOrder = value)  _
						= false) Then
				Me._DisplayOrder = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageNM() As String
		Get
			Return Me._ImageNM
		End Get
		Set
			If (String.Equals(Me._ImageNM, value) = false) Then
				Me._ImageNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageDS", DbType:="NVarChar(MAX)")>  _
	Public Property ImageDS() As String
		Get
			Return Me._ImageDS
		End Get
		Set
			If (String.Equals(Me._ImageDS, value) = false) Then
				Me._ImageDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageFileNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ImageFileNM() As String
		Get
			Return Me._ImageFileNM
		End Get
		Set
			If (String.Equals(Me._ImageFileNM, value) = false) Then
				Me._ImageFileNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_CollectionItemMineral_InsertResult
	
	Private _CollectionItemMineralID As Integer
	
	Private _CollectionItemID As Integer
	
	Private _MineralID As Integer
	
	Private _Position As Integer
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemMineralID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemMineralID() As Integer
		Get
			Return Me._CollectionItemMineralID
		End Get
		Set
			If ((Me._CollectionItemMineralID = value)  _
						= false) Then
				Me._CollectionItemMineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralID", DbType:="Int NOT NULL")>  _
	Public Property MineralID() As Integer
		Get
			Return Me._MineralID
		End Get
		Set
			If ((Me._MineralID = value)  _
						= false) Then
				Me._MineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Position", DbType:="Int NOT NULL")>  _
	Public Property Position() As Integer
		Get
			Return Me._Position
		End Get
		Set
			If ((Me._Position = value)  _
						= false) Then
				Me._Position = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_CollectionItemMineral_SelectResult
	
	Private _CollectionItemMineralID As Integer
	
	Private _CollectionItemID As Integer
	
	Private _MineralID As Integer
	
	Private _Position As Integer
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemMineralID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemMineralID() As Integer
		Get
			Return Me._CollectionItemMineralID
		End Get
		Set
			If ((Me._CollectionItemMineralID = value)  _
						= false) Then
				Me._CollectionItemMineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralID", DbType:="Int NOT NULL")>  _
	Public Property MineralID() As Integer
		Get
			Return Me._MineralID
		End Get
		Set
			If ((Me._MineralID = value)  _
						= false) Then
				Me._MineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Position", DbType:="Int NOT NULL")>  _
	Public Property Position() As Integer
		Get
			Return Me._Position
		End Get
		Set
			If ((Me._Position = value)  _
						= false) Then
				Me._Position = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_CollectionItemMineral_UpdateResult
	
	Private _CollectionItemMineralID As Integer
	
	Private _CollectionItemID As Integer
	
	Private _MineralID As Integer
	
	Private _Position As Integer
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemMineralID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemMineralID() As Integer
		Get
			Return Me._CollectionItemMineralID
		End Get
		Set
			If ((Me._CollectionItemMineralID = value)  _
						= false) Then
				Me._CollectionItemMineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionItemID", DbType:="Int NOT NULL")>  _
	Public Property CollectionItemID() As Integer
		Get
			Return Me._CollectionItemID
		End Get
		Set
			If ((Me._CollectionItemID = value)  _
						= false) Then
				Me._CollectionItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralID", DbType:="Int NOT NULL")>  _
	Public Property MineralID() As Integer
		Get
			Return Me._MineralID
		End Get
		Set
			If ((Me._MineralID = value)  _
						= false) Then
				Me._MineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Position", DbType:="Int NOT NULL")>  _
	Public Property Position() As Integer
		Get
			Return Me._Position
		End Get
		Set
			If ((Me._Position = value)  _
						= false) Then
				Me._Position = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_LocationCity_InsertResult
	
	Private _LocationCityID As Integer
	
	Private _City As String
	
	Private _CityDS As String
	
	Private _County As String
	
	Private _Latitude As String
	
	Private _Longitude As String
	
	Private _LocationStateID As System.Nullable(Of Integer)
	
	Private _LocationCountryID As System.Nullable(Of Integer)
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCityID", DbType:="Int NOT NULL")>  _
	Public Property LocationCityID() As Integer
		Get
			Return Me._LocationCityID
		End Get
		Set
			If ((Me._LocationCityID = value)  _
						= false) Then
				Me._LocationCityID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityDS", DbType:="NVarChar(MAX)")>  _
	Public Property CityDS() As String
		Get
			Return Me._CityDS
		End Get
		Set
			If (String.Equals(Me._CityDS, value) = false) Then
				Me._CityDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_County", DbType:="NVarChar(255)")>  _
	Public Property County() As String
		Get
			Return Me._County
		End Get
		Set
			If (String.Equals(Me._County, value) = false) Then
				Me._County = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="NChar(10)")>  _
	Public Property Latitude() As String
		Get
			Return Me._Latitude
		End Get
		Set
			If (String.Equals(Me._Latitude, value) = false) Then
				Me._Latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="NChar(10)")>  _
	Public Property Longitude() As String
		Get
			Return Me._Longitude
		End Get
		Set
			If (String.Equals(Me._Longitude, value) = false) Then
				Me._Longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationStateID", DbType:="Int")>  _
	Public Property LocationStateID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationStateID
		End Get
		Set
			If (Me._LocationStateID.Equals(value) = false) Then
				Me._LocationStateID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", DbType:="Int")>  _
	Public Property LocationCountryID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If (Me._LocationCountryID.Equals(value) = false) Then
				Me._LocationCountryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_LocationCity_SelectResult
	
	Private _LocationCityID As Integer
	
	Private _City As String
	
	Private _CityDS As String
	
	Private _County As String
	
	Private _Latitude As String
	
	Private _Longitude As String
	
	Private _LocationStateID As System.Nullable(Of Integer)
	
	Private _LocationCountryID As System.Nullable(Of Integer)
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCityID", DbType:="Int NOT NULL")>  _
	Public Property LocationCityID() As Integer
		Get
			Return Me._LocationCityID
		End Get
		Set
			If ((Me._LocationCityID = value)  _
						= false) Then
				Me._LocationCityID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityDS", DbType:="NVarChar(MAX)")>  _
	Public Property CityDS() As String
		Get
			Return Me._CityDS
		End Get
		Set
			If (String.Equals(Me._CityDS, value) = false) Then
				Me._CityDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_County", DbType:="NVarChar(255)")>  _
	Public Property County() As String
		Get
			Return Me._County
		End Get
		Set
			If (String.Equals(Me._County, value) = false) Then
				Me._County = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="NChar(10)")>  _
	Public Property Latitude() As String
		Get
			Return Me._Latitude
		End Get
		Set
			If (String.Equals(Me._Latitude, value) = false) Then
				Me._Latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="NChar(10)")>  _
	Public Property Longitude() As String
		Get
			Return Me._Longitude
		End Get
		Set
			If (String.Equals(Me._Longitude, value) = false) Then
				Me._Longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationStateID", DbType:="Int")>  _
	Public Property LocationStateID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationStateID
		End Get
		Set
			If (Me._LocationStateID.Equals(value) = false) Then
				Me._LocationStateID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", DbType:="Int")>  _
	Public Property LocationCountryID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If (Me._LocationCountryID.Equals(value) = false) Then
				Me._LocationCountryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_LocationCity_UpdateResult
	
	Private _LocationCityID As Integer
	
	Private _City As String
	
	Private _CityDS As String
	
	Private _County As String
	
	Private _Latitude As String
	
	Private _Longitude As String
	
	Private _LocationStateID As System.Nullable(Of Integer)
	
	Private _LocationCountryID As System.Nullable(Of Integer)
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCityID", DbType:="Int NOT NULL")>  _
	Public Property LocationCityID() As Integer
		Get
			Return Me._LocationCityID
		End Get
		Set
			If ((Me._LocationCityID = value)  _
						= false) Then
				Me._LocationCityID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me._City = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityDS", DbType:="NVarChar(MAX)")>  _
	Public Property CityDS() As String
		Get
			Return Me._CityDS
		End Get
		Set
			If (String.Equals(Me._CityDS, value) = false) Then
				Me._CityDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_County", DbType:="NVarChar(255)")>  _
	Public Property County() As String
		Get
			Return Me._County
		End Get
		Set
			If (String.Equals(Me._County, value) = false) Then
				Me._County = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Latitude", DbType:="NChar(10)")>  _
	Public Property Latitude() As String
		Get
			Return Me._Latitude
		End Get
		Set
			If (String.Equals(Me._Latitude, value) = false) Then
				Me._Latitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Longitude", DbType:="NChar(10)")>  _
	Public Property Longitude() As String
		Get
			Return Me._Longitude
		End Get
		Set
			If (String.Equals(Me._Longitude, value) = false) Then
				Me._Longitude = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationStateID", DbType:="Int")>  _
	Public Property LocationStateID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationStateID
		End Get
		Set
			If (Me._LocationStateID.Equals(value) = false) Then
				Me._LocationStateID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", DbType:="Int")>  _
	Public Property LocationCountryID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If (Me._LocationCountryID.Equals(value) = false) Then
				Me._LocationCountryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_LocationState_InsertResult
	
	Private _LocationStateID As Integer
	
	Private _StateNM As String
	
	Private _StateCD As String
	
	Private _StateDS As String
	
	Private _LocationCountryID As System.Nullable(Of Integer)
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationStateID", DbType:="Int NOT NULL")>  _
	Public Property LocationStateID() As Integer
		Get
			Return Me._LocationStateID
		End Get
		Set
			If ((Me._LocationStateID = value)  _
						= false) Then
				Me._LocationStateID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property StateNM() As String
		Get
			Return Me._StateNM
		End Get
		Set
			If (String.Equals(Me._StateNM, value) = false) Then
				Me._StateNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateCD", DbType:="NVarChar(50)")>  _
	Public Property StateCD() As String
		Get
			Return Me._StateCD
		End Get
		Set
			If (String.Equals(Me._StateCD, value) = false) Then
				Me._StateCD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateDS", DbType:="NVarChar(MAX)")>  _
	Public Property StateDS() As String
		Get
			Return Me._StateDS
		End Get
		Set
			If (String.Equals(Me._StateDS, value) = false) Then
				Me._StateDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", DbType:="Int")>  _
	Public Property LocationCountryID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If (Me._LocationCountryID.Equals(value) = false) Then
				Me._LocationCountryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_LocationState_SelectResult
	
	Private _LocationStateID As Integer
	
	Private _StateNM As String
	
	Private _StateCD As String
	
	Private _StateDS As String
	
	Private _LocationCountryID As System.Nullable(Of Integer)
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationStateID", DbType:="Int NOT NULL")>  _
	Public Property LocationStateID() As Integer
		Get
			Return Me._LocationStateID
		End Get
		Set
			If ((Me._LocationStateID = value)  _
						= false) Then
				Me._LocationStateID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property StateNM() As String
		Get
			Return Me._StateNM
		End Get
		Set
			If (String.Equals(Me._StateNM, value) = false) Then
				Me._StateNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateCD", DbType:="NVarChar(50)")>  _
	Public Property StateCD() As String
		Get
			Return Me._StateCD
		End Get
		Set
			If (String.Equals(Me._StateCD, value) = false) Then
				Me._StateCD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateDS", DbType:="NVarChar(MAX)")>  _
	Public Property StateDS() As String
		Get
			Return Me._StateDS
		End Get
		Set
			If (String.Equals(Me._StateDS, value) = false) Then
				Me._StateDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", DbType:="Int")>  _
	Public Property LocationCountryID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If (Me._LocationCountryID.Equals(value) = false) Then
				Me._LocationCountryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_LocationState_UpdateResult
	
	Private _LocationStateID As Integer
	
	Private _StateNM As String
	
	Private _StateCD As String
	
	Private _StateDS As String
	
	Private _LocationCountryID As System.Nullable(Of Integer)
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationStateID", DbType:="Int NOT NULL")>  _
	Public Property LocationStateID() As Integer
		Get
			Return Me._LocationStateID
		End Get
		Set
			If ((Me._LocationStateID = value)  _
						= false) Then
				Me._LocationStateID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property StateNM() As String
		Get
			Return Me._StateNM
		End Get
		Set
			If (String.Equals(Me._StateNM, value) = false) Then
				Me._StateNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateCD", DbType:="NVarChar(50)")>  _
	Public Property StateCD() As String
		Get
			Return Me._StateCD
		End Get
		Set
			If (String.Equals(Me._StateCD, value) = false) Then
				Me._StateCD = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StateDS", DbType:="NVarChar(MAX)")>  _
	Public Property StateDS() As String
		Get
			Return Me._StateDS
		End Get
		Set
			If (String.Equals(Me._StateDS, value) = false) Then
				Me._StateDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationCountryID", DbType:="Int")>  _
	Public Property LocationCountryID() As System.Nullable(Of Integer)
		Get
			Return Me._LocationCountryID
		End Get
		Set
			If (Me._LocationCountryID.Equals(value) = false) Then
				Me._LocationCountryID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_Mineral_InsertResult
	
	Private _MineralID As Integer
	
	Private _MineralNM As String
	
	Private _MineralDS As String
	
	Private _WikipediaURL As String
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralID", DbType:="Int NOT NULL")>  _
	Public Property MineralID() As Integer
		Get
			Return Me._MineralID
		End Get
		Set
			If ((Me._MineralID = value)  _
						= false) Then
				Me._MineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property MineralNM() As String
		Get
			Return Me._MineralNM
		End Get
		Set
			If (String.Equals(Me._MineralNM, value) = false) Then
				Me._MineralNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralDS", DbType:="NVarChar(MAX)")>  _
	Public Property MineralDS() As String
		Get
			Return Me._MineralDS
		End Get
		Set
			If (String.Equals(Me._MineralDS, value) = false) Then
				Me._MineralDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WikipediaURL", DbType:="NVarChar(255)")>  _
	Public Property WikipediaURL() As String
		Get
			Return Me._WikipediaURL
		End Get
		Set
			If (String.Equals(Me._WikipediaURL, value) = false) Then
				Me._WikipediaURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_Mineral_SelectResult
	
	Private _MineralID As Integer
	
	Private _MineralNM As String
	
	Private _MineralDS As String
	
	Private _WikipediaURL As String
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralID", DbType:="Int NOT NULL")>  _
	Public Property MineralID() As Integer
		Get
			Return Me._MineralID
		End Get
		Set
			If ((Me._MineralID = value)  _
						= false) Then
				Me._MineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property MineralNM() As String
		Get
			Return Me._MineralNM
		End Get
		Set
			If (String.Equals(Me._MineralNM, value) = false) Then
				Me._MineralNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralDS", DbType:="NVarChar(MAX)")>  _
	Public Property MineralDS() As String
		Get
			Return Me._MineralDS
		End Get
		Set
			If (String.Equals(Me._MineralDS, value) = false) Then
				Me._MineralDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WikipediaURL", DbType:="NVarChar(255)")>  _
	Public Property WikipediaURL() As String
		Get
			Return Me._WikipediaURL
		End Get
		Set
			If (String.Equals(Me._WikipediaURL, value) = false) Then
				Me._WikipediaURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class

Partial Public Class gsp_Mineral_UpdateResult
	
	Private _MineralID As Integer
	
	Private _MineralNM As String
	
	Private _MineralDS As String
	
	Private _WikipediaURL As String
	
	Private _ModifiedID As Integer
	
	Private _ModifiedDT As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralID", DbType:="Int NOT NULL")>  _
	Public Property MineralID() As Integer
		Get
			Return Me._MineralID
		End Get
		Set
			If ((Me._MineralID = value)  _
						= false) Then
				Me._MineralID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralNM", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property MineralNM() As String
		Get
			Return Me._MineralNM
		End Get
		Set
			If (String.Equals(Me._MineralNM, value) = false) Then
				Me._MineralNM = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MineralDS", DbType:="NVarChar(MAX)")>  _
	Public Property MineralDS() As String
		Get
			Return Me._MineralDS
		End Get
		Set
			If (String.Equals(Me._MineralDS, value) = false) Then
				Me._MineralDS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WikipediaURL", DbType:="NVarChar(255)")>  _
	Public Property WikipediaURL() As String
		Get
			Return Me._WikipediaURL
		End Get
		Set
			If (String.Equals(Me._WikipediaURL, value) = false) Then
				Me._WikipediaURL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedID", DbType:="Int NOT NULL")>  _
	Public Property ModifiedID() As Integer
		Get
			Return Me._ModifiedID
		End Get
		Set
			If ((Me._ModifiedID = value)  _
						= false) Then
				Me._ModifiedID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDT", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDT() As Date
		Get
			Return Me._ModifiedDT
		End Get
		Set
			If ((Me._ModifiedDT = value)  _
						= false) Then
				Me._ModifiedDT = value
			End If
		End Set
	End Property
End Class
